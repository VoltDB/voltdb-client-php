/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return and integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
// For PHP < 5.3
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
// For PHP < 5.3
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  swig_object_wrapper *value=NULL;
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=newobject;
    if (newobject <= 1) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      value->newobject = 0;
      zval *resource;
      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      zend_class_entry **ce = NULL;
      zval *classname;
      MAKE_STD_ZVAL(classname);
      /* _p_Foo -> Foo */
      ZVAL_STRING(classname, (char*)type->name+3, 1);
      /* class names are stored in lowercase */
      php_strtolower(Z_STRVAL_PP(&classname), Z_STRLEN_PP(&classname));
      if (zend_lookup_class(Z_STRVAL_P(classname), Z_STRLEN_P(classname), &ce TSRMLS_CC) != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
      efree(classname->value.str.val);
      FREE_ZVAL(classname);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if ( flags & SWIG_POINTER_DISOWN ) {
    value->newobject = 0;
  }
  p = value->ptr;
  if (type==-1) return NULL;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  TSRMLS_FETCH();

  if (zend_get_constant(const_name, sizeof(const_name), pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  }
  FREE_ZVAL(pointer);
  return ret;
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

#define SWIG_MEMBER_PTR ((char*)"CLASS::*")

static void member_ptr_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC) {
  efree(rsrc->ptr);
}

static int le_member_ptr;


/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_int swig_types[0]
#define SWIGTYPE_p_bool swig_types[1]
#define SWIGTYPE_p_boost__shared_arrayT_char_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t swig_types[4]
#define SWIGTYPE_p_char swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_long swig_types[7]
#define SWIGTYPE_p_short swig_types[8]
#define SWIGTYPE_p_signed_char swig_types[9]
#define SWIGTYPE_p_size_type swig_types[10]
#define SWIGTYPE_p_std__exception swig_types[11]
#define SWIGTYPE_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t swig_types[12]
#define SWIGTYPE_p_std__ostringstream swig_types[13]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t swig_types[14]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[15]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[16]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[17]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_voltdb__Column_t swig_types[21]
#define SWIGTYPE_p_std__vectorT_voltdb__Decimal_t swig_types[22]
#define SWIGTYPE_p_std__vectorT_voltdb__Parameter_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_voltdb__Table_t swig_types[24]
#define SWIGTYPE_p_ttmath__IntT_4_t swig_types[25]
#define SWIGTYPE_p_uint8_t swig_types[26]
#define SWIGTYPE_p_value_type swig_types[27]
#define SWIGTYPE_p_voltdb__ByteBuffer swig_types[28]
#define SWIGTYPE_p_voltdb__Client swig_types[29]
#define SWIGTYPE_p_voltdb__ClientConfig swig_types[30]
#define SWIGTYPE_p_voltdb__ClusterInstanceMismatchException swig_types[31]
#define SWIGTYPE_p_voltdb__Column swig_types[32]
#define SWIGTYPE_p_voltdb__ConnectException swig_types[33]
#define SWIGTYPE_p_voltdb__ConnectionPool swig_types[34]
#define SWIGTYPE_p_voltdb__Decimal swig_types[35]
#define SWIGTYPE_p_voltdb__Exception swig_types[36]
#define SWIGTYPE_p_voltdb__ExpandableByteBuffer swig_types[37]
#define SWIGTYPE_p_voltdb__IndexOutOfBoundsException swig_types[38]
#define SWIGTYPE_p_voltdb__InvalidColumnException swig_types[39]
#define SWIGTYPE_p_voltdb__InvocationResponse swig_types[40]
#define SWIGTYPE_p_voltdb__LibEventException swig_types[41]
#define SWIGTYPE_p_voltdb__NoConnectionsException swig_types[42]
#define SWIGTYPE_p_voltdb__NoMoreRowsException swig_types[43]
#define SWIGTYPE_p_voltdb__NonExpandableBufferException swig_types[44]
#define SWIGTYPE_p_voltdb__NullPointerException swig_types[45]
#define SWIGTYPE_p_voltdb__OverflowUnderflowException swig_types[46]
#define SWIGTYPE_p_voltdb__ParamMismatchException swig_types[47]
#define SWIGTYPE_p_voltdb__Parameter swig_types[48]
#define SWIGTYPE_p_voltdb__ParameterSet swig_types[49]
#define SWIGTYPE_p_voltdb__Procedure swig_types[50]
#define SWIGTYPE_p_voltdb__ProcedureCallback swig_types[51]
#define SWIGTYPE_p_voltdb__Row swig_types[52]
#define SWIGTYPE_p_voltdb__ScopedByteBuffer swig_types[53]
#define SWIGTYPE_p_voltdb__SharedByteBuffer swig_types[54]
#define SWIGTYPE_p_voltdb__StatusListener swig_types[55]
#define SWIGTYPE_p_voltdb__StringToDecimalException swig_types[56]
#define SWIGTYPE_p_voltdb__Table swig_types[57]
#define SWIGTYPE_p_voltdb__TableIterator swig_types[58]
#define SWIGTYPE_p_voltdb__UninitializedParamsException swig_types[59]
static swig_type_info *swig_types[61];
static swig_module_info swig_module = {swig_types, 60, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(voltdb)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(voltdb)
ZEND_DECLARE_MODULE_GLOBALS(voltdb)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(voltdb_globals_id, zend_voltdb_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(voltdb_globals_id, zend_voltdb_globals *, error_code )
#else
#define SWIG_ErrorMsg() (voltdb_globals.error_msg)
#define SWIG_ErrorCode() (voltdb_globals.error_code)
#endif

static void voltdb_init_globals(zend_voltdb_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void voltdb_destroy_globals(zend_voltdb_globals * globals) { (void)globals; }

static void SWIG_ResetError() {
  TSRMLS_FETCH();
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_voltdb_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;
  int thisown;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_voltdb_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "voltdb"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_voltdb.h"
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to PHP extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PHP_HEADER_
#define SWIG_DIRECTOR_PHP_HEADER_

#ifdef __cplusplus

#include <string>
#include <map>

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif

namespace Swig {
  /* memory handler */
  struct GCItem
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var()
    {
      delete _item;
    }

    GCItem * operator->() const
    {
      return _item;
    }

    private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }

    virtual ~GCItem_Object()
    {
    }

    int get_own() const
    {
      return _own;
    }

    private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }

    virtual ~GCItem_T()
    {
      delete _ptr;
    }

    private:
    Type *_ptr;
  };

  class Director {
    protected:
      zval *swig_self;
      typedef std::map<void*, GCItem_var> swig_ownership_map;
      mutable swig_ownership_map swig_owner;
    public:
      Director(zval* self) : swig_self(self) {
      }

      ~Director() {
        for (swig_ownership_map::iterator i = swig_owner.begin(); i != swig_owner.end(); i++) {
          swig_owner.erase(i);
        }
      }

      bool swig_is_overridden_method(char *cname, char *lc_fname) {
        zval classname;
        zend_class_entry **ce;
        zend_function *mptr;
        int name_len = strlen(lc_fname);

        ZVAL_STRING(&classname, cname, 0);
        if (zend_lookup_class(Z_STRVAL_P(&classname), Z_STRLEN_P(&classname), &ce TSRMLS_CC) != SUCCESS) {
          return false;
        }
        if (zend_hash_find(&(*ce)->function_table, lc_fname, name_len + 1, (void**) &mptr) != SUCCESS) {
          return false;
        }
        // common.scope points to the declaring class
        return strcmp(mptr->common.scope->name, cname);
      }

      template <typename Type>
      void swig_acquire_ownership(Type *vptr) const
      {
        if (vptr) {
          swig_owner[vptr] = new GCItem_T<Type>(vptr);
        }
      }
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(int code, const char *hdr, const char* msg)
      : swig_msg(hdr)
    {
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      SWIG_ErrorCode() = code;
      SWIG_ErrorMsg() = swig_msg.c_str();
    }

    static void raise(int code, const char *hdr, const char* msg)
    {
      throw DirectorException(code, hdr, msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg)
      : DirectorException(E_ERROR, "SWIG director pure virtual method called", msg)
    {
    }

    static void raise(const char *msg)
    {
      throw DirectorPureVirtualException(msg);
    }
  };
  /* any php exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException
  {
  public:
    DirectorMethodException(const char* msg = "")
      : DirectorException(E_ERROR, "SWIG director method error", msg)
    {
    }

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };
}

#endif /* __cplusplus */

#endif

#include "Exception.hpp"
#include "WireType.h"
#include "Parameter.hpp"
#include "ByteBuffer.hpp"
#include "Decimal.hpp"
#include "ParameterSet.hpp"
#include "Procedure.hpp"
#include "InvocationResponse.hpp"
#include "ProcedureCallback.hpp"
#include "Client.h"
#include "Row.hpp"
#include "TableIterator.h"
#include "Table.h"
#include "StatusListener.h"
#include "Column.hpp"
#include "ConnectionPool.h"
#include "ClientConfig.h"


#if PHP_MAJOR_VERSION < 5
# define SWIG_exception(code, msg) { zend_error(E_ERROR, msg); }
#else
# include "zend_exceptions.h"
# define SWIG_exception(code, msg) { zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC); }
#endif


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN bool std_vector_Sl_voltdb_Parameter_Sg__is_empty(std::vector< voltdb::Parameter > const *self){
        return self->empty();
      }
SWIGINTERN voltdb::Parameter std_vector_Sl_voltdb_Parameter_Sg__pop(std::vector< voltdb::Parameter > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        voltdb::Parameter x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< voltdb::Parameter >::const_reference std_vector_Sl_voltdb_Parameter_Sg__get(std::vector< voltdb::Parameter > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_voltdb_Parameter_Sg__set(std::vector< voltdb::Parameter > *self,int i,std::vector< voltdb::Parameter >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_voltdb_Table_Sg__is_empty(std::vector< voltdb::Table > const *self){
        return self->empty();
      }
SWIGINTERN voltdb::Table std_vector_Sl_voltdb_Table_Sg__pop(std::vector< voltdb::Table > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        voltdb::Table x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< voltdb::Table >::const_reference std_vector_Sl_voltdb_Table_Sg__get(std::vector< voltdb::Table > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_voltdb_Table_Sg__set(std::vector< voltdb::Table > *self,int i,std::vector< voltdb::Table >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_voltdb_Column_Sg__is_empty(std::vector< voltdb::Column > const *self){
        return self->empty();
      }
SWIGINTERN voltdb::Column std_vector_Sl_voltdb_Column_Sg__pop(std::vector< voltdb::Column > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        voltdb::Column x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< voltdb::Column >::const_reference std_vector_Sl_voltdb_Column_Sg__get(std::vector< voltdb::Column > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_voltdb_Column_Sg__set(std::vector< voltdb::Column > *self,int i,std::vector< voltdb::Column >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_int8_t_Sg__is_empty(std::vector< int8_t > const *self){
        return self->empty();
      }
SWIGINTERN signed char std_vector_Sl_int8_t_Sg__pop(std::vector< int8_t > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        signed char x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< signed char >::const_reference std_vector_Sl_int8_t_Sg__get(std::vector< int8_t > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int8_t_Sg__set(std::vector< int8_t > *self,int i,std::vector< signed char >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_int16_t_Sg__is_empty(std::vector< int16_t > const *self){
        return self->empty();
      }
SWIGINTERN short std_vector_Sl_int16_t_Sg__pop(std::vector< int16_t > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        short x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< short >::const_reference std_vector_Sl_int16_t_Sg__get(std::vector< int16_t > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int16_t_Sg__set(std::vector< int16_t > *self,int i,std::vector< short >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_int32_t_Sg__is_empty(std::vector< int32_t > const *self){
        return self->empty();
      }
SWIGINTERN int std_vector_Sl_int32_t_Sg__pop(std::vector< int32_t > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        int x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int32_t_Sg__get(std::vector< int32_t > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__set(std::vector< int32_t > *self,int i,std::vector< int >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_int64_t_Sg__is_empty(std::vector< int64_t > const *self){
        return self->empty();
      }
SWIGINTERN long std_vector_Sl_int64_t_Sg__pop(std::vector< int64_t > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        long x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_int64_t_Sg__get(std::vector< int64_t > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__set(std::vector< int64_t > *self,int i,std::vector< long >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_double_Sg__is_empty(std::vector< double > const *self){
        return self->empty();
      }
SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        double x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__is_empty(std::vector< std::string > const *self){
        return self->empty();
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        std::string x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_voltdb_Decimal_Sg__is_empty(std::vector< voltdb::Decimal > const *self){
        return self->empty();
      }
SWIGINTERN voltdb::Decimal std_vector_Sl_voltdb_Decimal_Sg__pop(std::vector< voltdb::Decimal > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        voltdb::Decimal x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< voltdb::Decimal >::const_reference std_vector_Sl_voltdb_Decimal_Sg__get(std::vector< voltdb::Decimal > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_voltdb_Decimal_Sg__set(std::vector< voltdb::Decimal > *self,int i,std::vector< voltdb::Decimal >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_voltdb__ExpandableByteBufferTo_p_voltdb__ByteBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::ByteBuffer *)  ((voltdb::ExpandableByteBuffer *) x));
}
static void *_p_voltdb__SharedByteBufferTo_p_voltdb__ByteBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::ByteBuffer *) (voltdb::ExpandableByteBuffer *) ((voltdb::SharedByteBuffer *) x));
}
static void *_p_voltdb__ScopedByteBufferTo_p_voltdb__ByteBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::ByteBuffer *) (voltdb::ExpandableByteBuffer *) ((voltdb::ScopedByteBuffer *) x));
}
static void *_p_voltdb__SharedByteBufferTo_p_voltdb__ExpandableByteBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::ExpandableByteBuffer *)  ((voltdb::SharedByteBuffer *) x));
}
static void *_p_voltdb__ScopedByteBufferTo_p_voltdb__ExpandableByteBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::ExpandableByteBuffer *)  ((voltdb::ScopedByteBuffer *) x));
}
static void *_p_voltdb__NullPointerExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::NullPointerException *) x));
}
static void *_p_voltdb__InvalidColumnExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::InvalidColumnException *) x));
}
static void *_p_voltdb__OverflowUnderflowExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::OverflowUnderflowException *) x));
}
static void *_p_voltdb__IndexOutOfBoundsExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::IndexOutOfBoundsException *) x));
}
static void *_p_voltdb__NonExpandableBufferExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::NonExpandableBufferException *) x));
}
static void *_p_voltdb__UninitializedParamsExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::UninitializedParamsException *) x));
}
static void *_p_voltdb__ParamMismatchExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::ParamMismatchException *) x));
}
static void *_p_voltdb__NoMoreRowsExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::NoMoreRowsException *) x));
}
static void *_p_voltdb__StringToDecimalExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::StringToDecimalException *) x));
}
static void *_p_voltdb__ConnectExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::ConnectException *) x));
}
static void *_p_voltdb__NoConnectionsExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::NoConnectionsException *) x));
}
static void *_p_voltdb__LibEventExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::LibEventException *) x));
}
static void *_p_voltdb__ClusterInstanceMismatchExceptionTo_p_voltdb__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((voltdb::Exception *)  ((voltdb::ClusterInstanceMismatchException *) x));
}
static void *_p_voltdb__ClusterInstanceMismatchExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::ClusterInstanceMismatchException *) x));
}
static void *_p_voltdb__LibEventExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::LibEventException *) x));
}
static void *_p_voltdb__NoConnectionsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::NoConnectionsException *) x));
}
static void *_p_voltdb__ConnectExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::ConnectException *) x));
}
static void *_p_voltdb__StringToDecimalExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::StringToDecimalException *) x));
}
static void *_p_voltdb__NoMoreRowsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::NoMoreRowsException *) x));
}
static void *_p_voltdb__ParamMismatchExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::ParamMismatchException *) x));
}
static void *_p_voltdb__UninitializedParamsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::UninitializedParamsException *) x));
}
static void *_p_voltdb__NonExpandableBufferExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::NonExpandableBufferException *) x));
}
static void *_p_voltdb__IndexOutOfBoundsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::IndexOutOfBoundsException *) x));
}
static void *_p_voltdb__OverflowUnderflowExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::OverflowUnderflowException *) x));
}
static void *_p_voltdb__InvalidColumnExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::InvalidColumnException *) x));
}
static void *_p_voltdb__NullPointerExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (voltdb::Exception *) ((voltdb::NullPointerException *) x));
}
static void *_p_voltdb__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((voltdb::Exception *) x));
}
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_arrayT_char_t = {"_p_boost__shared_arrayT_char_t", "boost::shared_array< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_voltdb__ProcedureCallback_t = {"_p_boost__shared_ptrT_voltdb__ProcedureCallback_t", "boost::shared_ptr< voltdb::ProcedureCallback > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_voltdb__StatusListener_t = {"_p_boost__shared_ptrT_voltdb__StatusListener_t", "boost::shared_ptr< voltdb::StatusListener > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "int64_t *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t = {"_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t", "voltdb::ClientMap *|std::map< std::string,std::vector< boost::shared_ptr< voltdb::ClientStuff > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostringstream = {"_p_std__ostringstream", "std::ostringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t = {"_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t", "voltdb::ClientSet *|std::vector< boost::shared_ptr< voltdb::ClientStuff > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int32_t > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *|std::vector< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< int16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< int8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_voltdb__Column_t = {"_p_std__vectorT_voltdb__Column_t", "std::vector< voltdb::Column > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_voltdb__Decimal_t = {"_p_std__vectorT_voltdb__Decimal_t", "std::vector< voltdb::Decimal > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_voltdb__Parameter_t = {"_p_std__vectorT_voltdb__Parameter_t", "std::vector< voltdb::Parameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_voltdb__Table_t = {"_p_std__vectorT_voltdb__Table_t", "std::vector< voltdb::Table > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ttmath__IntT_4_t = {"_p_ttmath__IntT_4_t", "ttmath::Int< 4 > *|voltdb::TTInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ByteBuffer = {"_p_voltdb__ByteBuffer", "voltdb::ByteBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Client = {"_p_voltdb__Client", "voltdb::Client *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ClientConfig = {"_p_voltdb__ClientConfig", "voltdb::ClientConfig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ClusterInstanceMismatchException = {"_p_voltdb__ClusterInstanceMismatchException", "voltdb::ClusterInstanceMismatchException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Column = {"_p_voltdb__Column", "std::vector< voltdb::Column >::value_type *|voltdb::Column *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ConnectException = {"_p_voltdb__ConnectException", "voltdb::ConnectException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ConnectionPool = {"_p_voltdb__ConnectionPool", "voltdb::ConnectionPool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Decimal = {"_p_voltdb__Decimal", "std::vector< voltdb::Decimal >::value_type *|voltdb::Decimal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Exception = {"_p_voltdb__Exception", "voltdb::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ExpandableByteBuffer = {"_p_voltdb__ExpandableByteBuffer", "voltdb::ExpandableByteBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__IndexOutOfBoundsException = {"_p_voltdb__IndexOutOfBoundsException", "voltdb::IndexOutOfBoundsException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__InvalidColumnException = {"_p_voltdb__InvalidColumnException", "voltdb::InvalidColumnException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__InvocationResponse = {"_p_voltdb__InvocationResponse", "voltdb::InvocationResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__LibEventException = {"_p_voltdb__LibEventException", "voltdb::LibEventException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__NoConnectionsException = {"_p_voltdb__NoConnectionsException", "voltdb::NoConnectionsException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__NoMoreRowsException = {"_p_voltdb__NoMoreRowsException", "voltdb::NoMoreRowsException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__NonExpandableBufferException = {"_p_voltdb__NonExpandableBufferException", "voltdb::NonExpandableBufferException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__NullPointerException = {"_p_voltdb__NullPointerException", "voltdb::NullPointerException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__OverflowUnderflowException = {"_p_voltdb__OverflowUnderflowException", "voltdb::OverflowUnderflowException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ParamMismatchException = {"_p_voltdb__ParamMismatchException", "voltdb::ParamMismatchException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Parameter = {"_p_voltdb__Parameter", "voltdb::Parameter *|std::vector< voltdb::Parameter >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ParameterSet = {"_p_voltdb__ParameterSet", "voltdb::ParameterSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Procedure = {"_p_voltdb__Procedure", "voltdb::Procedure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ProcedureCallback = {"_p_voltdb__ProcedureCallback", "voltdb::ProcedureCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Row = {"_p_voltdb__Row", "voltdb::Row *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__ScopedByteBuffer = {"_p_voltdb__ScopedByteBuffer", "voltdb::ScopedByteBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__SharedByteBuffer = {"_p_voltdb__SharedByteBuffer", "voltdb::SharedByteBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__StatusListener = {"_p_voltdb__StatusListener", "voltdb::StatusListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__StringToDecimalException = {"_p_voltdb__StringToDecimalException", "voltdb::StringToDecimalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__Table = {"_p_voltdb__Table", "voltdb::Table *|std::vector< voltdb::Table >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__TableIterator = {"_p_voltdb__TableIterator", "voltdb::TableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_voltdb__UninitializedParamsException = {"_p_voltdb__UninitializedParamsException", "voltdb::UninitializedParamsException *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__int,
  &_swigt__p_bool,
  &_swigt__p_boost__shared_arrayT_char_t,
  &_swigt__p_boost__shared_ptrT_voltdb__ProcedureCallback_t,
  &_swigt__p_boost__shared_ptrT_voltdb__StatusListener_t,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__exception,
  &_swigt__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t,
  &_swigt__p_std__ostringstream,
  &_swigt__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_voltdb__Column_t,
  &_swigt__p_std__vectorT_voltdb__Decimal_t,
  &_swigt__p_std__vectorT_voltdb__Parameter_t,
  &_swigt__p_std__vectorT_voltdb__Table_t,
  &_swigt__p_ttmath__IntT_4_t,
  &_swigt__p_uint8_t,
  &_swigt__p_value_type,
  &_swigt__p_voltdb__ByteBuffer,
  &_swigt__p_voltdb__Client,
  &_swigt__p_voltdb__ClientConfig,
  &_swigt__p_voltdb__ClusterInstanceMismatchException,
  &_swigt__p_voltdb__Column,
  &_swigt__p_voltdb__ConnectException,
  &_swigt__p_voltdb__ConnectionPool,
  &_swigt__p_voltdb__Decimal,
  &_swigt__p_voltdb__Exception,
  &_swigt__p_voltdb__ExpandableByteBuffer,
  &_swigt__p_voltdb__IndexOutOfBoundsException,
  &_swigt__p_voltdb__InvalidColumnException,
  &_swigt__p_voltdb__InvocationResponse,
  &_swigt__p_voltdb__LibEventException,
  &_swigt__p_voltdb__NoConnectionsException,
  &_swigt__p_voltdb__NoMoreRowsException,
  &_swigt__p_voltdb__NonExpandableBufferException,
  &_swigt__p_voltdb__NullPointerException,
  &_swigt__p_voltdb__OverflowUnderflowException,
  &_swigt__p_voltdb__ParamMismatchException,
  &_swigt__p_voltdb__Parameter,
  &_swigt__p_voltdb__ParameterSet,
  &_swigt__p_voltdb__Procedure,
  &_swigt__p_voltdb__ProcedureCallback,
  &_swigt__p_voltdb__Row,
  &_swigt__p_voltdb__ScopedByteBuffer,
  &_swigt__p_voltdb__SharedByteBuffer,
  &_swigt__p_voltdb__StatusListener,
  &_swigt__p_voltdb__StringToDecimalException,
  &_swigt__p_voltdb__Table,
  &_swigt__p_voltdb__TableIterator,
  &_swigt__p_voltdb__UninitializedParamsException,
};

static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_arrayT_char_t[] = {  {&_swigt__p_boost__shared_arrayT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_voltdb__ProcedureCallback_t[] = {  {&_swigt__p_boost__shared_ptrT_voltdb__ProcedureCallback_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_voltdb__StatusListener_t[] = {  {&_swigt__p_boost__shared_ptrT_voltdb__StatusListener_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_voltdb__ClusterInstanceMismatchException, _p_voltdb__ClusterInstanceMismatchExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__LibEventException, _p_voltdb__LibEventExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__NoConnectionsException, _p_voltdb__NoConnectionsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__ConnectException, _p_voltdb__ConnectExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__StringToDecimalException, _p_voltdb__StringToDecimalExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__NoMoreRowsException, _p_voltdb__NoMoreRowsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__ParamMismatchException, _p_voltdb__ParamMismatchExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__UninitializedParamsException, _p_voltdb__UninitializedParamsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__NonExpandableBufferException, _p_voltdb__NonExpandableBufferExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__IndexOutOfBoundsException, _p_voltdb__IndexOutOfBoundsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__OverflowUnderflowException, _p_voltdb__OverflowUnderflowExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__InvalidColumnException, _p_voltdb__InvalidColumnExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_voltdb__NullPointerException, _p_voltdb__NullPointerExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_voltdb__Exception, _p_voltdb__ExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostringstream[] = {  {&_swigt__p_std__ostringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_voltdb__Column_t[] = {  {&_swigt__p_std__vectorT_voltdb__Column_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_voltdb__Decimal_t[] = {  {&_swigt__p_std__vectorT_voltdb__Decimal_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_voltdb__Parameter_t[] = {  {&_swigt__p_std__vectorT_voltdb__Parameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_voltdb__Table_t[] = {  {&_swigt__p_std__vectorT_voltdb__Table_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ttmath__IntT_4_t[] = {  {&_swigt__p_ttmath__IntT_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ByteBuffer[] = {  {&_swigt__p_voltdb__ByteBuffer, 0, 0, 0},  {&_swigt__p_voltdb__ExpandableByteBuffer, _p_voltdb__ExpandableByteBufferTo_p_voltdb__ByteBuffer, 0, 0},  {&_swigt__p_voltdb__SharedByteBuffer, _p_voltdb__SharedByteBufferTo_p_voltdb__ByteBuffer, 0, 0},  {&_swigt__p_voltdb__ScopedByteBuffer, _p_voltdb__ScopedByteBufferTo_p_voltdb__ByteBuffer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Client[] = {  {&_swigt__p_voltdb__Client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ClientConfig[] = {  {&_swigt__p_voltdb__ClientConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ClusterInstanceMismatchException[] = {  {&_swigt__p_voltdb__ClusterInstanceMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Column[] = {  {&_swigt__p_voltdb__Column, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ConnectException[] = {  {&_swigt__p_voltdb__ConnectException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ConnectionPool[] = {  {&_swigt__p_voltdb__ConnectionPool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Decimal[] = {  {&_swigt__p_voltdb__Decimal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Exception[] = {  {&_swigt__p_voltdb__NullPointerException, _p_voltdb__NullPointerExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__InvalidColumnException, _p_voltdb__InvalidColumnExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__OverflowUnderflowException, _p_voltdb__OverflowUnderflowExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__IndexOutOfBoundsException, _p_voltdb__IndexOutOfBoundsExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__NonExpandableBufferException, _p_voltdb__NonExpandableBufferExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__UninitializedParamsException, _p_voltdb__UninitializedParamsExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__ParamMismatchException, _p_voltdb__ParamMismatchExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__NoMoreRowsException, _p_voltdb__NoMoreRowsExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__StringToDecimalException, _p_voltdb__StringToDecimalExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__ConnectException, _p_voltdb__ConnectExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__NoConnectionsException, _p_voltdb__NoConnectionsExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__LibEventException, _p_voltdb__LibEventExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__ClusterInstanceMismatchException, _p_voltdb__ClusterInstanceMismatchExceptionTo_p_voltdb__Exception, 0, 0},  {&_swigt__p_voltdb__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ExpandableByteBuffer[] = {  {&_swigt__p_voltdb__ExpandableByteBuffer, 0, 0, 0},  {&_swigt__p_voltdb__SharedByteBuffer, _p_voltdb__SharedByteBufferTo_p_voltdb__ExpandableByteBuffer, 0, 0},  {&_swigt__p_voltdb__ScopedByteBuffer, _p_voltdb__ScopedByteBufferTo_p_voltdb__ExpandableByteBuffer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__IndexOutOfBoundsException[] = {  {&_swigt__p_voltdb__IndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__InvalidColumnException[] = {  {&_swigt__p_voltdb__InvalidColumnException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__InvocationResponse[] = {  {&_swigt__p_voltdb__InvocationResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__LibEventException[] = {  {&_swigt__p_voltdb__LibEventException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__NoConnectionsException[] = {  {&_swigt__p_voltdb__NoConnectionsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__NoMoreRowsException[] = {  {&_swigt__p_voltdb__NoMoreRowsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__NonExpandableBufferException[] = {  {&_swigt__p_voltdb__NonExpandableBufferException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__NullPointerException[] = {  {&_swigt__p_voltdb__NullPointerException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__OverflowUnderflowException[] = {  {&_swigt__p_voltdb__OverflowUnderflowException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ParamMismatchException[] = {  {&_swigt__p_voltdb__ParamMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Parameter[] = {  {&_swigt__p_voltdb__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ParameterSet[] = {  {&_swigt__p_voltdb__ParameterSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Procedure[] = {  {&_swigt__p_voltdb__Procedure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ProcedureCallback[] = {  {&_swigt__p_voltdb__ProcedureCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Row[] = {  {&_swigt__p_voltdb__Row, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__ScopedByteBuffer[] = {  {&_swigt__p_voltdb__ScopedByteBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__SharedByteBuffer[] = {  {&_swigt__p_voltdb__SharedByteBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__StatusListener[] = {  {&_swigt__p_voltdb__StatusListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__StringToDecimalException[] = {  {&_swigt__p_voltdb__StringToDecimalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__Table[] = {  {&_swigt__p_voltdb__Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__TableIterator[] = {  {&_swigt__p_voltdb__TableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_voltdb__UninitializedParamsException[] = {  {&_swigt__p_voltdb__UninitializedParamsException, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__int,
  _swigc__p_bool,
  _swigc__p_boost__shared_arrayT_char_t,
  _swigc__p_boost__shared_ptrT_voltdb__ProcedureCallback_t,
  _swigc__p_boost__shared_ptrT_voltdb__StatusListener_t,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__exception,
  _swigc__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t,
  _swigc__p_std__ostringstream,
  _swigc__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_voltdb__Column_t,
  _swigc__p_std__vectorT_voltdb__Decimal_t,
  _swigc__p_std__vectorT_voltdb__Parameter_t,
  _swigc__p_std__vectorT_voltdb__Table_t,
  _swigc__p_ttmath__IntT_4_t,
  _swigc__p_uint8_t,
  _swigc__p_value_type,
  _swigc__p_voltdb__ByteBuffer,
  _swigc__p_voltdb__Client,
  _swigc__p_voltdb__ClientConfig,
  _swigc__p_voltdb__ClusterInstanceMismatchException,
  _swigc__p_voltdb__Column,
  _swigc__p_voltdb__ConnectException,
  _swigc__p_voltdb__ConnectionPool,
  _swigc__p_voltdb__Decimal,
  _swigc__p_voltdb__Exception,
  _swigc__p_voltdb__ExpandableByteBuffer,
  _swigc__p_voltdb__IndexOutOfBoundsException,
  _swigc__p_voltdb__InvalidColumnException,
  _swigc__p_voltdb__InvocationResponse,
  _swigc__p_voltdb__LibEventException,
  _swigc__p_voltdb__NoConnectionsException,
  _swigc__p_voltdb__NoMoreRowsException,
  _swigc__p_voltdb__NonExpandableBufferException,
  _swigc__p_voltdb__NullPointerException,
  _swigc__p_voltdb__OverflowUnderflowException,
  _swigc__p_voltdb__ParamMismatchException,
  _swigc__p_voltdb__Parameter,
  _swigc__p_voltdb__ParameterSet,
  _swigc__p_voltdb__Procedure,
  _swigc__p_voltdb__ProcedureCallback,
  _swigc__p_voltdb__Row,
  _swigc__p_voltdb__ScopedByteBuffer,
  _swigc__p_voltdb__SharedByteBuffer,
  _swigc__p_voltdb__StatusListener,
  _swigc__p_voltdb__StringToDecimalException,
  _swigc__p_voltdb__Table,
  _swigc__p_voltdb__TableIterator,
  _swigc__p_voltdb__UninitializedParamsException,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */

#include "voltdb_wrap.h"

SwigDirector_c_Exception::SwigDirector_c_Exception(zval *self): voltdb::Exception(), Swig::Director(self) {

}



SwigDirector_c_Exception::~SwigDirector_c_Exception() throw () {
}

char const *SwigDirector_c_Exception::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_NullPointerException::SwigDirector_NullPointerException(zval *self): voltdb::NullPointerException(), Swig::Director(self) {

}



SwigDirector_NullPointerException::~SwigDirector_NullPointerException() throw () {
}

char const *SwigDirector_NullPointerException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_InvalidColumnException::SwigDirector_InvalidColumnException(zval *self): voltdb::InvalidColumnException(), Swig::Director(self) {

}



SwigDirector_InvalidColumnException::~SwigDirector_InvalidColumnException() throw () {
}

char const *SwigDirector_InvalidColumnException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_OverflowUnderflowException::SwigDirector_OverflowUnderflowException(zval *self): voltdb::OverflowUnderflowException(), Swig::Director(self) {

}



SwigDirector_OverflowUnderflowException::~SwigDirector_OverflowUnderflowException() throw () {
}

char const *SwigDirector_OverflowUnderflowException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_IndexOutOfBoundsException::SwigDirector_IndexOutOfBoundsException(zval *self): voltdb::IndexOutOfBoundsException(), Swig::Director(self) {

}



SwigDirector_IndexOutOfBoundsException::~SwigDirector_IndexOutOfBoundsException() throw () {
}

char const *SwigDirector_IndexOutOfBoundsException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_NonExpandableBufferException::SwigDirector_NonExpandableBufferException(zval *self): voltdb::NonExpandableBufferException(), Swig::Director(self) {

}



SwigDirector_NonExpandableBufferException::~SwigDirector_NonExpandableBufferException() throw () {
}

char const *SwigDirector_NonExpandableBufferException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_UninitializedParamsException::SwigDirector_UninitializedParamsException(zval *self): voltdb::UninitializedParamsException(), Swig::Director(self) {

}



SwigDirector_UninitializedParamsException::~SwigDirector_UninitializedParamsException() throw () {
}

char const *SwigDirector_UninitializedParamsException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ParamMismatchException::SwigDirector_ParamMismatchException(zval *self): voltdb::ParamMismatchException(), Swig::Director(self) {

}



SwigDirector_ParamMismatchException::~SwigDirector_ParamMismatchException() throw () {
}

char const *SwigDirector_ParamMismatchException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_NoMoreRowsException::SwigDirector_NoMoreRowsException(zval *self): voltdb::NoMoreRowsException(), Swig::Director(self) {

}



SwigDirector_NoMoreRowsException::~SwigDirector_NoMoreRowsException() throw () {
}

char const *SwigDirector_NoMoreRowsException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_StringToDecimalException::SwigDirector_StringToDecimalException(zval *self): voltdb::StringToDecimalException(), Swig::Director(self) {

}



SwigDirector_StringToDecimalException::~SwigDirector_StringToDecimalException() throw () {
}

char const *SwigDirector_StringToDecimalException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ConnectException::SwigDirector_ConnectException(zval *self): voltdb::ConnectException(), Swig::Director(self) {

}



SwigDirector_ConnectException::~SwigDirector_ConnectException() throw () {
}

char const *SwigDirector_ConnectException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_NoConnectionsException::SwigDirector_NoConnectionsException(zval *self): voltdb::NoConnectionsException(), Swig::Director(self) {

}



SwigDirector_NoConnectionsException::~SwigDirector_NoConnectionsException() throw () {
}

char const *SwigDirector_NoConnectionsException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_LibEventException::SwigDirector_LibEventException(zval *self): voltdb::LibEventException(), Swig::Director(self) {

}



SwigDirector_LibEventException::~SwigDirector_LibEventException() throw () {
}

char const *SwigDirector_LibEventException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ClusterInstanceMismatchException::SwigDirector_ClusterInstanceMismatchException(zval *self): voltdb::ClusterInstanceMismatchException(), Swig::Director(self) {

}



SwigDirector_ClusterInstanceMismatchException::~SwigDirector_ClusterInstanceMismatchException() throw () {
}

char const *SwigDirector_ClusterInstanceMismatchException::what() const throw() {
  char *c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"what", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*&result)->type==IS_NULL) {
    c_result = (char *) 0;
  } else {
    convert_to_string_ex(&result);
    c_result = (char *) Z_STRVAL_PP(&result);
  }
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (char const *) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ByteBuffer::SwigDirector_ByteBuffer(zval *self, char *buffer, int32_t capacity): voltdb::ByteBuffer(buffer, capacity), Swig::Director(self) {

}



SwigDirector_ByteBuffer::SwigDirector_ByteBuffer(zval *self, voltdb::ByteBuffer const &other): voltdb::ByteBuffer(other), Swig::Director(self) {

}



SwigDirector_ByteBuffer::SwigDirector_ByteBuffer(zval *self): voltdb::ByteBuffer(), Swig::Director(self) {

}



bool SwigDirector_ByteBuffer::isExpandable() {
  bool c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"isExpandable", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ByteBuffer::ensureRemaining(int32_t remaining) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemaining", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,remaining);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ByteBuffer::ensureRemainingExact(int32_t remaining) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemainingExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,remaining);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ByteBuffer::ensureCapacity(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacity", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ByteBuffer::ensureCapacityExact(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacityExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ByteBuffer::~SwigDirector_ByteBuffer() {
}

SwigDirector_ExpandableByteBuffer::SwigDirector_ExpandableByteBuffer(zval *self, voltdb::ExpandableByteBuffer const &other): voltdb::ExpandableByteBuffer(other), Swig::Director(self) {

}



SwigDirector_ExpandableByteBuffer::SwigDirector_ExpandableByteBuffer(zval *self): voltdb::ExpandableByteBuffer(), Swig::Director(self) {

}



SwigDirector_ExpandableByteBuffer::SwigDirector_ExpandableByteBuffer(zval *self, char *data, int32_t length): voltdb::ExpandableByteBuffer(data, length), Swig::Director(self) {

}



bool SwigDirector_ExpandableByteBuffer::isExpandable() {
  bool c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"isExpandable", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ExpandableByteBuffer::ensureRemaining(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemaining", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ExpandableByteBuffer::ensureRemainingExact(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemainingExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ExpandableByteBuffer::ensureCapacity(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacity", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ExpandableByteBuffer::ensureCapacityExact(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacityExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ExpandableByteBuffer::~SwigDirector_ExpandableByteBuffer() {
}

void SwigDirector_ExpandableByteBuffer::resetRef(char *data) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"resetRef", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;

  SWIG_SetPointerZval(&obj0, (void *)&data, SWIGTYPE_p_char, 0);

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_SharedByteBuffer::SwigDirector_SharedByteBuffer(zval *self, voltdb::SharedByteBuffer const &other): voltdb::SharedByteBuffer(other), Swig::Director(self) {

}



SwigDirector_SharedByteBuffer::SwigDirector_SharedByteBuffer(zval *self): voltdb::SharedByteBuffer(), Swig::Director(self) {

}



SwigDirector_SharedByteBuffer::SwigDirector_SharedByteBuffer(zval *self, char *data, int32_t length): voltdb::SharedByteBuffer(data, length), Swig::Director(self) {

}



SwigDirector_SharedByteBuffer::SwigDirector_SharedByteBuffer(zval *self, boost::shared_array< char > data, int32_t length): voltdb::SharedByteBuffer(data, length), Swig::Director(self) {

}



bool SwigDirector_SharedByteBuffer::isExpandable() {
  bool c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"isExpandable", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_SharedByteBuffer::ensureRemaining(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemaining", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_SharedByteBuffer::ensureRemainingExact(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemainingExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_SharedByteBuffer::ensureCapacity(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacity", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_SharedByteBuffer::ensureCapacityExact(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacityExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_SharedByteBuffer::~SwigDirector_SharedByteBuffer() {
}

void SwigDirector_SharedByteBuffer::resetRef(char *data) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"resetRef", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;

  SWIG_SetPointerZval(&obj0, (void *)&data, SWIGTYPE_p_char, 0);

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ScopedByteBuffer::SwigDirector_ScopedByteBuffer(zval *self, int32_t capacity): voltdb::ScopedByteBuffer(capacity), Swig::Director(self) {

}



SwigDirector_ScopedByteBuffer::SwigDirector_ScopedByteBuffer(zval *self, char *data, int32_t length): voltdb::ScopedByteBuffer(data, length), Swig::Director(self) {

}



bool SwigDirector_ScopedByteBuffer::isExpandable() {
  bool c_result;
  zval **args = NULL;
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"isExpandable", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 0, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ScopedByteBuffer::ensureRemaining(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemaining", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ScopedByteBuffer::ensureRemainingExact(int32_t amount) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureRemainingExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,amount);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ScopedByteBuffer::ensureCapacity(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacity", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


void SwigDirector_ScopedByteBuffer::ensureCapacityExact(int32_t capacity) throw(voltdb::NonExpandableBufferException) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"ensureCapacityExact", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_LONG(&obj0,capacity);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ScopedByteBuffer::~SwigDirector_ScopedByteBuffer() {
}

void SwigDirector_ScopedByteBuffer::resetRef(char *data) {
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"resetRef", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;

  SWIG_SetPointerZval(&obj0, (void *)&data, SWIGTYPE_p_char, 0);

  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ProcedureCallbackNative::SwigDirector_ProcedureCallbackNative(zval *self): voltdb::ProcedureCallback(), Swig::Director(self) {

}



bool SwigDirector_ProcedureCallbackNative::callback(voltdb::InvocationResponse response) throw(voltdb::Exception) {
  bool c_result;
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"callback", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    SWIG_SetPointerZval(&obj0, SWIG_as_voidptr(&response), SWIGTYPE_p_voltdb__InvocationResponse, 2);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_ProcedureCallbackNative::~SwigDirector_ProcedureCallbackNative() {
}

SwigDirector_StatusListenerNative::SwigDirector_StatusListenerNative(zval *self): voltdb::StatusListener(), Swig::Director(self) {

}



bool SwigDirector_StatusListenerNative::uncaughtException(std::exception exception, boost::shared_ptr< voltdb::ProcedureCallback > callback, voltdb::InvocationResponse response) {
  bool c_result;
  zval *args[3];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"uncaughtException", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    SWIG_SetPointerZval(&obj0, SWIG_as_voidptr(&exception), SWIGTYPE_p_std__exception, 2);
  }
  zval obj1;
  args[1] = &obj1;
  {
    SWIG_SetPointerZval(&obj1, SWIG_as_voidptr(&callback), SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t, 2);
  }
  zval obj2;
  args[2] = &obj2;
  {
    SWIG_SetPointerZval(&obj2, SWIG_as_voidptr(&response), SWIGTYPE_p_voltdb__InvocationResponse, 2);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 3, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


bool SwigDirector_StatusListenerNative::connectionLost(std::string hostname, int32_t connectionsLeft) {
  bool c_result;
  zval *args[2];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"connectionLost", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;

  ZVAL_STRINGL(&obj0, const_cast<char*>(hostname.data()), hostname.size(), 1);

  zval obj1;
  args[1] = &obj1;
  {
    ZVAL_LONG(&obj1,connectionsLeft);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 2, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


bool SwigDirector_StatusListenerNative::backpressure(bool hasBackpressure) {
  bool c_result;
  zval *args[1];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"backpressure", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }

  zval obj0;
  args[0] = &obj0;
  {
    ZVAL_BOOL(&obj0,(hasBackpressure)?1:0);
  }
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 1, args TSRMLS_CC);

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(&result);
  c_result = (bool) Z_LVAL_PP(&result);
  /*@SWIG@*/;

  FREE_ZVAL(result);
  return (bool) c_result;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


SwigDirector_StatusListenerNative::~SwigDirector_StatusListenerNative() {
}

SwigDirector_ConnectionPool::SwigDirector_ConnectionPool(zval *self): voltdb::ConnectionPool(), Swig::Director(self) {

}



SwigDirector_ConnectionPool::~SwigDirector_ConnectionPool() {
}

/* vdecl subsection */
static int le_swig__p_std__vectorT_signed_char_t=0; /* handle for Int8Vector */
static int le_swig__p_boost__shared_arrayT_char_t=0; /* handle for _p_boost__shared_arrayT_char_t */
static int le_swig__p_voltdb__Decimal=0; /* handle for Decimal */
static int le_swig__p_voltdb__Table=0; /* handle for Table */
static int le_swig__p_voltdb__Client=0; /* handle for ClientNative */
static int le_swig__p_boost__shared_ptrT_voltdb__ProcedureCallback_t=0; /* handle for _p_boost__shared_ptrT_voltdb__ProcedureCallback_t */
static int le_swig__p_char=0; /* handle for _p_char */
static int le_swig__p_size_type=0; /* handle for _p_size_type */
static int le_swig__p_std__vectorT_voltdb__Column_t=0; /* handle for Columns */
static int le_swig__p_bool=0; /* handle for _p_bool */
static int le_swig__p_uint8_t=0; /* handle for _p_uint8_t */
static int le_swig__p_boost__shared_ptrT_voltdb__StatusListener_t=0; /* handle for _p_boost__shared_ptrT_voltdb__StatusListener_t */
static int le_swig__p_voltdb__Procedure=0; /* handle for Procedure */
static int le_swig__p_std__vectorT_voltdb__Parameter_t=0; /* handle for Parameters */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_voltdb__StatusListener=0; /* handle for StatusListenerNative */
static int le_swig__p_voltdb__ParameterSet=0; /* handle for ParameterSet */
static int le_swig__p_voltdb__Column=0; /* handle for Column */
static int le_swig__p_long=0; /* handle for _p_long */
static int le_swig__p_std__vectorT_double_t=0; /* handle for DoubleVector */
static int le_swig__p_voltdb__TableIterator=0; /* handle for TableIterator */
static int le_swig__p_std__vectorT_int_t=0; /* handle for Int32Vector */
static int le_swig__p_voltdb__ByteBuffer=0; /* handle for ByteBuffer */
static int le_swig__p_voltdb__ExpandableByteBuffer=0; /* handle for ExpandableByteBuffer */
static int le_swig__p_voltdb__SharedByteBuffer=0; /* handle for SharedByteBuffer */
static int le_swig__p_voltdb__ScopedByteBuffer=0; /* handle for ScopedByteBuffer */
static int le_swig__p_ttmath__IntT_4_t=0; /* handle for _p_ttmath__IntT_4_t */
static int le_swig__p_voltdb__ClientConfig=0; /* handle for ClientConfigNative */
static int le_swig__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t=0; /* handle for _p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t */
static int le_swig__p_voltdb__NoConnectionsException=0; /* handle for NoConnectionsException */
static int le_swig__p_voltdb__ConnectException=0; /* handle for ConnectException */
static int le_swig__p_voltdb__StringToDecimalException=0; /* handle for StringToDecimalException */
static int le_swig__p_voltdb__NoMoreRowsException=0; /* handle for NoMoreRowsException */
static int le_swig__p_voltdb__ParamMismatchException=0; /* handle for ParamMismatchException */
static int le_swig__p_voltdb__UninitializedParamsException=0; /* handle for UninitializedParamsException */
static int le_swig__p_voltdb__NonExpandableBufferException=0; /* handle for NonExpandableBufferException */
static int le_swig__p_voltdb__IndexOutOfBoundsException=0; /* handle for IndexOutOfBoundsException */
static int le_swig__p_voltdb__OverflowUnderflowException=0; /* handle for OverflowUnderflowException */
static int le_swig__p_voltdb__InvalidColumnException=0; /* handle for InvalidColumnException */
static int le_swig__p_voltdb__NullPointerException=0; /* handle for NullPointerException */
static int le_swig__p_voltdb__Exception=0; /* handle for c_Exception */
static int le_swig__p_voltdb__LibEventException=0; /* handle for LibEventException */
static int le_swig__p_voltdb__ClusterInstanceMismatchException=0; /* handle for ClusterInstanceMismatchException */
static int le_swig__p_std__exception=0; /* handle for _p_std__exception */
static int le_swig__p_std__vectorT_voltdb__Decimal_t=0; /* handle for DecimalVector */
static int le_swig__p_voltdb__Parameter=0; /* handle for Parameter */
static int le_swig__p_signed_char=0; /* handle for _p_signed_char */
static int le_swig__p_voltdb__InvocationResponse=0; /* handle for InvocationResponse */
static int le_swig__p_std__ostringstream=0; /* handle for _p_std__ostringstream */
static int le_swig__p_short=0; /* handle for _p_short */
static int le_swig__p_std__vectorT_long_t=0; /* handle for Int64Vector */
static int le_swig__p_voltdb__ProcedureCallback=0; /* handle for ProcedureCallbackNative */
static int le_swig__p_voltdb__Row=0; /* handle for Row */
static int le_swig__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t=0; /* handle for _p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t */
static int le_swig__p_std__vectorT_short_t=0; /* handle for Int16Vector */
static int le_swig__p_voltdb__ConnectionPool=0; /* handle for ConnectionPool */
static int le_swig__p_value_type=0; /* handle for _p_value_type */
static int le_swig__p_int=0; /* handle for _p_int */
static int le_swig__p_std__vectorT_voltdb__Table_t=0; /* handle for Tables */
static int le_swig__p_std__vectorT_std__string_t=0; /* handle for StringVector */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_Parameters__SWIG_0) {
  std::vector< voltdb::Parameter > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< voltdb::Parameter > *)new std::vector< voltdb::Parameter >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameters__SWIG_1) {
  std::vector< voltdb::Parameter >::size_type arg1 ;
  zval **args[1];
  std::vector< voltdb::Parameter > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< voltdb::Parameter >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< voltdb::Parameter > *)new std::vector< voltdb::Parameter >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameters) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Parameters__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Parameters__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Parameters'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_size) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Parameter >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_size. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Parameter > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_capacity) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Parameter >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_capacity. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Parameter > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_reserve) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  std::vector< voltdb::Parameter >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_reserve. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< voltdb::Parameter >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_clear) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_clear. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_push) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  std::vector< voltdb::Parameter >::value_type *arg2 = 0 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_push. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Parameter, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Parameters_push. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  (arg1)->push_back((std::vector< voltdb::Parameter >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_is_empty) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_is_empty. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_voltdb_Parameter_Sg__is_empty((std::vector< voltdb::Parameter > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_pop) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  zval **args[1];
  voltdb::Parameter result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_pop. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_voltdb_Parameter_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    voltdb::Parameter * resultobj = new voltdb::Parameter((const voltdb::Parameter &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Parameter, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_get) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< voltdb::Parameter >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_get. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< voltdb::Parameter >::value_type *) &std_vector_Sl_voltdb_Parameter_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Parameter, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameters_set) {
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;
  int arg2 ;
  std::vector< voltdb::Parameter >::value_type *arg3 = 0 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameters_set. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__Parameter, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Parameters_set. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  try {
    std_vector_Sl_voltdb_Parameter_Sg__set(arg1,arg2,(voltdb::Parameter const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Parameters(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< voltdb::Parameter > *arg1 = (std::vector< voltdb::Parameter > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< voltdb::Parameter > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_voltdb__Parameter_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(voltdb::Parameter)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Tables__SWIG_0) {
  std::vector< voltdb::Table > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< voltdb::Table > *)new std::vector< voltdb::Table >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Tables__SWIG_1) {
  std::vector< voltdb::Table >::size_type arg1 ;
  zval **args[1];
  std::vector< voltdb::Table > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< voltdb::Table >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< voltdb::Table > *)new std::vector< voltdb::Table >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Tables) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Tables__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Tables__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Tables'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_size) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Table >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_size. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Table > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_capacity) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Table >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_capacity. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Table > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_reserve) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  std::vector< voltdb::Table >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_reserve. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< voltdb::Table >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_clear) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_clear. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_push) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  std::vector< voltdb::Table >::value_type *arg2 = 0 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_push. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Table, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Tables_push. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  (arg1)->push_back((std::vector< voltdb::Table >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_is_empty) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_is_empty. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_voltdb_Table_Sg__is_empty((std::vector< voltdb::Table > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_pop) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  zval **args[1];
  voltdb::Table result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_pop. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_voltdb_Table_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    voltdb::Table * resultobj = new voltdb::Table((const voltdb::Table &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Table, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_get) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< voltdb::Table >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_get. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< voltdb::Table >::value_type *) &std_vector_Sl_voltdb_Table_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Table, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Tables_set) {
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;
  int arg2 ;
  std::vector< voltdb::Table >::value_type *arg3 = 0 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Tables_set. Expected SWIGTYPE_p_std__vectorT_voltdb__Table_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__Table, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Tables_set. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  try {
    std_vector_Sl_voltdb_Table_Sg__set(arg1,arg2,(voltdb::Table const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Tables(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< voltdb::Table > *arg1 = (std::vector< voltdb::Table > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< voltdb::Table > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_voltdb__Table_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(voltdb::Table)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Columns__SWIG_0) {
  std::vector< voltdb::Column > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< voltdb::Column > *)new std::vector< voltdb::Column >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Columns__SWIG_1) {
  std::vector< voltdb::Column >::size_type arg1 ;
  zval **args[1];
  std::vector< voltdb::Column > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< voltdb::Column >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< voltdb::Column > *)new std::vector< voltdb::Column >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Columns) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Columns__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Columns__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Columns'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_size) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Column >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_size. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Column > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_capacity) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Column >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_capacity. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Column > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_reserve) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  std::vector< voltdb::Column >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_reserve. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< voltdb::Column >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_clear) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_clear. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_push) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  std::vector< voltdb::Column >::value_type *arg2 = 0 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_push. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Column, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Columns_push. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  (arg1)->push_back((std::vector< voltdb::Column >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_is_empty) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_is_empty. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_voltdb_Column_Sg__is_empty((std::vector< voltdb::Column > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_pop) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  zval **args[1];
  voltdb::Column result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_pop. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_voltdb_Column_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    voltdb::Column * resultobj = new voltdb::Column((const voltdb::Column &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Column, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_get) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< voltdb::Column >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_get. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< voltdb::Column >::value_type *) &std_vector_Sl_voltdb_Column_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Column, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Columns_set) {
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;
  int arg2 ;
  std::vector< voltdb::Column >::value_type *arg3 = 0 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Columns_set. Expected SWIGTYPE_p_std__vectorT_voltdb__Column_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__Column, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Columns_set. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  try {
    std_vector_Sl_voltdb_Column_Sg__set(arg1,arg2,(voltdb::Column const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Columns(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< voltdb::Column > *arg1 = (std::vector< voltdb::Column > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< voltdb::Column > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_voltdb__Column_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(voltdb::Column)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int8Vector__SWIG_0) {
  std::vector< int8_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< int8_t > *)new std::vector< int8_t >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_signed_char_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int8Vector__SWIG_1) {
  std::vector< signed char >::size_type arg1 ;
  zval **args[1];
  std::vector< int8_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< signed char >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< int8_t > *)new std::vector< int8_t >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_signed_char_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int8Vector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Int8Vector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Int8Vector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_size) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  zval **args[1];
  std::vector< signed char >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_size. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int8_t > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_capacity) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  zval **args[1];
  std::vector< signed char >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_capacity. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int8_t > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_reserve) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_reserve. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< signed char >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_clear) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_clear. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_push) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::value_type *arg2 = 0 ;
  std::vector< signed char >::value_type temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_push. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< signed char >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< signed char >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_is_empty) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_is_empty. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int8_t_Sg__is_empty((std::vector< signed char > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_pop) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  zval **args[1];
  signed char result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_pop. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (signed char)std_vector_Sl_int8_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_get) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< signed char >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_get. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< signed char >::value_type *) &std_vector_Sl_int8_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int8Vector_set) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  int arg2 ;
  std::vector< signed char >::value_type *arg3 = 0 ;
  std::vector< signed char >::value_type temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int8Vector_set. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< signed char >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;

  try {
    std_vector_Sl_int8_t_Sg__set(arg1,arg2,(signed char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Int8Vector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int8_t > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_signed_char_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int8_t)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int16Vector__SWIG_0) {
  std::vector< int16_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< int16_t > *)new std::vector< int16_t >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_short_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int16Vector__SWIG_1) {
  std::vector< short >::size_type arg1 ;
  zval **args[1];
  std::vector< int16_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< short >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< int16_t > *)new std::vector< int16_t >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_short_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int16Vector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Int16Vector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Int16Vector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_size) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  zval **args[1];
  std::vector< short >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_size. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int16_t > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_capacity) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  zval **args[1];
  std::vector< short >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_capacity. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int16_t > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_reserve) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  std::vector< short >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_reserve. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< short >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_clear) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_clear. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_push) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  std::vector< short >::value_type *arg2 = 0 ;
  std::vector< short >::value_type temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_push. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< short >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< short >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_is_empty) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_is_empty. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int16_t_Sg__is_empty((std::vector< short > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_pop) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  zval **args[1];
  short result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_pop. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (short)std_vector_Sl_int16_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_get) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< short >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_get. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< short >::value_type *) &std_vector_Sl_int16_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int16Vector_set) {
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *arg3 = 0 ;
  std::vector< short >::value_type temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int16Vector_set. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< short >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;

  try {
    std_vector_Sl_int16_t_Sg__set(arg1,arg2,(short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Int16Vector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int16_t > *arg1 = (std::vector< int16_t > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int16_t > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_short_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int16_t)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int32Vector__SWIG_0) {
  std::vector< int32_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< int32_t > *)new std::vector< int32_t >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int32Vector__SWIG_1) {
  std::vector< int >::size_type arg1 ;
  zval **args[1];
  std::vector< int32_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< int >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int32Vector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Int32Vector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Int32Vector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_size) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  zval **args[1];
  std::vector< int >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_size. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int32_t > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_capacity) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  zval **args[1];
  std::vector< int >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_capacity. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_reserve) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_reserve. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< int >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_clear) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_clear. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_push) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_push. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< int >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_is_empty) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_is_empty. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int32_t_Sg__is_empty((std::vector< int > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_pop) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  zval **args[1];
  int result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_pop. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int)std_vector_Sl_int32_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_get) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< int >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_get. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int32Vector_set) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int32Vector_set. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< int >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;

  try {
    std_vector_Sl_int32_t_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Int32Vector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int32_t > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int32_t)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int64Vector__SWIG_0) {
  std::vector< int64_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< int64_t > *)new std::vector< int64_t >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_long_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int64Vector__SWIG_1) {
  std::vector< long >::size_type arg1 ;
  zval **args[1];
  std::vector< int64_t > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< long >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< int64_t > *)new std::vector< int64_t >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_long_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Int64Vector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Int64Vector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Int64Vector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_size) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  zval **args[1];
  std::vector< long >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_size. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int64_t > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_capacity) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  zval **args[1];
  std::vector< long >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_capacity. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int64_t > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_reserve) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_reserve. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< long >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_clear) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_clear. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_push) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_push. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< long >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_is_empty) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_is_empty. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int64_t_Sg__is_empty((std::vector< long > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_pop) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  zval **args[1];
  long result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_pop. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (long)std_vector_Sl_int64_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_get) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< long >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_get. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_int64_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Int64Vector_set) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Int64Vector_set. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< long >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;

  try {
    std_vector_Sl_int64_t_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Int64Vector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int64_t > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_long_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int64_t)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector__SWIG_0) {
  std::vector< double > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< double > *)new std::vector< double >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector__SWIG_1) {
  std::vector< double >::size_type arg1 ;
  zval **args[1];
  std::vector< double > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< double >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< double > *)new std::vector< double >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_DoubleVector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_size) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  std::vector< double >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_size. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_capacity) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  std::vector< double >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_capacity. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_reserve) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_reserve. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< double >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_clear) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_clear. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_push) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_push. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (std::vector< double >::value_type) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_is_empty) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_is_empty. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_double_Sg__is_empty((std::vector< double > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_pop) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  double result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_pop. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_get) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< double >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_get. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,*result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_set) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_set. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (std::vector< double >::value_type) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;

  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_DoubleVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< double > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_double_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(double)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector__SWIG_0) {
  std::vector< std::string > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< std::string > *)new std::vector< std::string >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector__SWIG_1) {
  std::vector< std::string >::size_type arg1 ;
  zval **args[1];
  std::vector< std::string > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< std::string >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_StringVector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_size) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::vector< std::string >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_size. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::string > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_capacity) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::vector< std::string >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_capacity. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::string > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_reserve) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_reserve. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< std::string >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_clear) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_clear. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_push) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_push. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;

  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_is_empty) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_is_empty. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_string_Sg__is_empty((std::vector< std::string > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_pop) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_pop. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_get) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< std::string >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_get. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_set) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::string temp3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_set. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  arg3 = &temp3;

  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }



  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StringVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< std::string > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__string_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::string)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DecimalVector__SWIG_0) {
  std::vector< voltdb::Decimal > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (std::vector< voltdb::Decimal > *)new std::vector< voltdb::Decimal >();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DecimalVector__SWIG_1) {
  std::vector< voltdb::Decimal >::size_type arg1 ;
  zval **args[1];
  std::vector< voltdb::Decimal > *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< voltdb::Decimal >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (std::vector< voltdb::Decimal > *)new std::vector< voltdb::Decimal >(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_DecimalVector) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_DecimalVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_DecimalVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_DecimalVector'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_size) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Decimal >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_size. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Decimal > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_capacity) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  zval **args[1];
  std::vector< voltdb::Decimal >::size_type result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_capacity. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< voltdb::Decimal > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_reserve) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  std::vector< voltdb::Decimal >::size_type arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_reserve. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< voltdb::Decimal >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  (arg1)->reserve(arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_clear) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_clear. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_push) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  std::vector< voltdb::Decimal >::value_type *arg2 = 0 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_push. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Decimal, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of DecimalVector_push. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  (arg1)->push_back((std::vector< voltdb::Decimal >::value_type const &)*arg2);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_is_empty) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_is_empty. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_voltdb_Decimal_Sg__is_empty((std::vector< voltdb::Decimal > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_pop) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  zval **args[1];
  voltdb::Decimal result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_pop. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_voltdb_Decimal_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }

  {
    voltdb::Decimal * resultobj = new voltdb::Decimal((const voltdb::Decimal &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Decimal, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_get) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< voltdb::Decimal >::value_type *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_get. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (std::vector< voltdb::Decimal >::value_type *) &std_vector_Sl_voltdb_Decimal_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Decimal, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_DecimalVector_set) {
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;
  int arg2 ;
  std::vector< voltdb::Decimal >::value_type *arg3 = 0 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DecimalVector_set. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__Decimal, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of DecimalVector_set. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  try {
    std_vector_Sl_voltdb_Decimal_Sg__set(arg1,arg2,(voltdb::Decimal const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_DecimalVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< voltdb::Decimal > *arg1 = (std::vector< voltdb::Decimal > *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< voltdb::Decimal > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_voltdb__Decimal_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(voltdb::Decimal)> resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_c_Exception(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Exception *arg1 = (voltdb::Exception *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Exception *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Exception TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Exception resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_c_Exception_what) {
  voltdb::Exception *arg1 = (voltdb::Exception *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"c_Exception", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Exception, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of c_Exception_what. Expected SWIGTYPE_p_voltdb__Exception");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::Exception const *)arg1)->voltdb::Exception::what();
  } else {
    result = (char *)((voltdb::Exception const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_c_Exception) {
  zval *arg0;
  zval **args[1];
  voltdb::Exception *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::Exception *)new voltdb::Exception();
  } else {
    result = (voltdb::Exception *)new SwigDirector_c_Exception(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Exception, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_NullPointerException) {
  zval *arg0;
  zval **args[1];
  voltdb::NullPointerException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::NullPointerException *)new voltdb::NullPointerException();
  } else {
    result = (voltdb::NullPointerException *)new SwigDirector_NullPointerException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__NullPointerException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_NullPointerException_what) {
  voltdb::NullPointerException *arg1 = (voltdb::NullPointerException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"NullPointerException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__NullPointerException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NullPointerException_what. Expected SWIGTYPE_p_voltdb__NullPointerException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::NullPointerException const *)arg1)->voltdb::NullPointerException::what();
  } else {
    result = (char *)((voltdb::NullPointerException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NullPointerException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::NullPointerException *arg1 = (voltdb::NullPointerException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::NullPointerException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__NullPointerException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::NullPointerException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_InvalidColumnException) {
  zval *arg0;
  zval **args[1];
  voltdb::InvalidColumnException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::InvalidColumnException *)new voltdb::InvalidColumnException();
  } else {
    result = (voltdb::InvalidColumnException *)new SwigDirector_InvalidColumnException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__InvalidColumnException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvalidColumnException_what) {
  voltdb::InvalidColumnException *arg1 = (voltdb::InvalidColumnException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"InvalidColumnException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvalidColumnException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvalidColumnException_what. Expected SWIGTYPE_p_voltdb__InvalidColumnException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::InvalidColumnException const *)arg1)->voltdb::InvalidColumnException::what();
  } else {
    result = (char *)((voltdb::InvalidColumnException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_InvalidColumnException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::InvalidColumnException *arg1 = (voltdb::InvalidColumnException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::InvalidColumnException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__InvalidColumnException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::InvalidColumnException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_OverflowUnderflowException) {
  zval *arg0;
  zval **args[1];
  voltdb::OverflowUnderflowException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::OverflowUnderflowException *)new voltdb::OverflowUnderflowException();
  } else {
    result = (voltdb::OverflowUnderflowException *)new SwigDirector_OverflowUnderflowException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__OverflowUnderflowException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_OverflowUnderflowException_what) {
  voltdb::OverflowUnderflowException *arg1 = (voltdb::OverflowUnderflowException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"OverflowUnderflowException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__OverflowUnderflowException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OverflowUnderflowException_what. Expected SWIGTYPE_p_voltdb__OverflowUnderflowException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::OverflowUnderflowException const *)arg1)->voltdb::OverflowUnderflowException::what();
  } else {
    result = (char *)((voltdb::OverflowUnderflowException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OverflowUnderflowException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::OverflowUnderflowException *arg1 = (voltdb::OverflowUnderflowException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::OverflowUnderflowException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__OverflowUnderflowException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::OverflowUnderflowException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_IndexOutOfBoundsException) {
  zval *arg0;
  zval **args[1];
  voltdb::IndexOutOfBoundsException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::IndexOutOfBoundsException *)new voltdb::IndexOutOfBoundsException();
  } else {
    result = (voltdb::IndexOutOfBoundsException *)new SwigDirector_IndexOutOfBoundsException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__IndexOutOfBoundsException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_IndexOutOfBoundsException_what) {
  voltdb::IndexOutOfBoundsException *arg1 = (voltdb::IndexOutOfBoundsException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"IndexOutOfBoundsException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__IndexOutOfBoundsException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IndexOutOfBoundsException_what. Expected SWIGTYPE_p_voltdb__IndexOutOfBoundsException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::IndexOutOfBoundsException const *)arg1)->voltdb::IndexOutOfBoundsException::what();
  } else {
    result = (char *)((voltdb::IndexOutOfBoundsException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IndexOutOfBoundsException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::IndexOutOfBoundsException *arg1 = (voltdb::IndexOutOfBoundsException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::IndexOutOfBoundsException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__IndexOutOfBoundsException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::IndexOutOfBoundsException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_NonExpandableBufferException) {
  zval *arg0;
  zval **args[1];
  voltdb::NonExpandableBufferException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::NonExpandableBufferException *)new voltdb::NonExpandableBufferException();
  } else {
    result = (voltdb::NonExpandableBufferException *)new SwigDirector_NonExpandableBufferException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__NonExpandableBufferException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_NonExpandableBufferException_what) {
  voltdb::NonExpandableBufferException *arg1 = (voltdb::NonExpandableBufferException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"NonExpandableBufferException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__NonExpandableBufferException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NonExpandableBufferException_what. Expected SWIGTYPE_p_voltdb__NonExpandableBufferException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::NonExpandableBufferException const *)arg1)->voltdb::NonExpandableBufferException::what();
  } else {
    result = (char *)((voltdb::NonExpandableBufferException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NonExpandableBufferException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::NonExpandableBufferException *arg1 = (voltdb::NonExpandableBufferException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::NonExpandableBufferException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__NonExpandableBufferException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::NonExpandableBufferException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_UninitializedParamsException) {
  zval *arg0;
  zval **args[1];
  voltdb::UninitializedParamsException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::UninitializedParamsException *)new voltdb::UninitializedParamsException();
  } else {
    result = (voltdb::UninitializedParamsException *)new SwigDirector_UninitializedParamsException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__UninitializedParamsException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_UninitializedParamsException_what) {
  voltdb::UninitializedParamsException *arg1 = (voltdb::UninitializedParamsException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"UninitializedParamsException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__UninitializedParamsException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UninitializedParamsException_what. Expected SWIGTYPE_p_voltdb__UninitializedParamsException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::UninitializedParamsException const *)arg1)->voltdb::UninitializedParamsException::what();
  } else {
    result = (char *)((voltdb::UninitializedParamsException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_UninitializedParamsException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::UninitializedParamsException *arg1 = (voltdb::UninitializedParamsException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::UninitializedParamsException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__UninitializedParamsException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::UninitializedParamsException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ParamMismatchException) {
  zval *arg0;
  zval **args[1];
  voltdb::ParamMismatchException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ParamMismatchException *)new voltdb::ParamMismatchException();
  } else {
    result = (voltdb::ParamMismatchException *)new SwigDirector_ParamMismatchException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParamMismatchException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParamMismatchException_what) {
  voltdb::ParamMismatchException *arg1 = (voltdb::ParamMismatchException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ParamMismatchException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParamMismatchException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParamMismatchException_what. Expected SWIGTYPE_p_voltdb__ParamMismatchException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::ParamMismatchException const *)arg1)->voltdb::ParamMismatchException::what();
  } else {
    result = (char *)((voltdb::ParamMismatchException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ParamMismatchException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ParamMismatchException *arg1 = (voltdb::ParamMismatchException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ParamMismatchException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ParamMismatchException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ParamMismatchException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_NoMoreRowsException) {
  zval *arg0;
  zval **args[1];
  voltdb::NoMoreRowsException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::NoMoreRowsException *)new voltdb::NoMoreRowsException();
  } else {
    result = (voltdb::NoMoreRowsException *)new SwigDirector_NoMoreRowsException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__NoMoreRowsException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_NoMoreRowsException_what) {
  voltdb::NoMoreRowsException *arg1 = (voltdb::NoMoreRowsException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"NoMoreRowsException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__NoMoreRowsException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NoMoreRowsException_what. Expected SWIGTYPE_p_voltdb__NoMoreRowsException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::NoMoreRowsException const *)arg1)->voltdb::NoMoreRowsException::what();
  } else {
    result = (char *)((voltdb::NoMoreRowsException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NoMoreRowsException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::NoMoreRowsException *arg1 = (voltdb::NoMoreRowsException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::NoMoreRowsException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__NoMoreRowsException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::NoMoreRowsException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_StringToDecimalException) {
  zval *arg0;
  zval **args[1];
  voltdb::StringToDecimalException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::StringToDecimalException *)new voltdb::StringToDecimalException();
  } else {
    result = (voltdb::StringToDecimalException *)new SwigDirector_StringToDecimalException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__StringToDecimalException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StringToDecimalException_what) {
  voltdb::StringToDecimalException *arg1 = (voltdb::StringToDecimalException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"StringToDecimalException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__StringToDecimalException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringToDecimalException_what. Expected SWIGTYPE_p_voltdb__StringToDecimalException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::StringToDecimalException const *)arg1)->voltdb::StringToDecimalException::what();
  } else {
    result = (char *)((voltdb::StringToDecimalException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StringToDecimalException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::StringToDecimalException *arg1 = (voltdb::StringToDecimalException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::StringToDecimalException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__StringToDecimalException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::StringToDecimalException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ConnectException) {
  zval *arg0;
  zval **args[1];
  voltdb::ConnectException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ConnectException *)new voltdb::ConnectException();
  } else {
    result = (voltdb::ConnectException *)new SwigDirector_ConnectException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ConnectException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectException_what) {
  voltdb::ConnectException *arg1 = (voltdb::ConnectException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ConnectException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectException_what. Expected SWIGTYPE_p_voltdb__ConnectException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::ConnectException const *)arg1)->voltdb::ConnectException::what();
  } else {
    result = (char *)((voltdb::ConnectException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ConnectException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ConnectException *arg1 = (voltdb::ConnectException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ConnectException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ConnectException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ConnectException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_NoConnectionsException) {
  zval *arg0;
  zval **args[1];
  voltdb::NoConnectionsException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::NoConnectionsException *)new voltdb::NoConnectionsException();
  } else {
    result = (voltdb::NoConnectionsException *)new SwigDirector_NoConnectionsException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__NoConnectionsException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_NoConnectionsException_what) {
  voltdb::NoConnectionsException *arg1 = (voltdb::NoConnectionsException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"NoConnectionsException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__NoConnectionsException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NoConnectionsException_what. Expected SWIGTYPE_p_voltdb__NoConnectionsException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::NoConnectionsException const *)arg1)->voltdb::NoConnectionsException::what();
  } else {
    result = (char *)((voltdb::NoConnectionsException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NoConnectionsException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::NoConnectionsException *arg1 = (voltdb::NoConnectionsException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::NoConnectionsException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__NoConnectionsException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::NoConnectionsException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_LibEventException) {
  zval *arg0;
  zval **args[1];
  voltdb::LibEventException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::LibEventException *)new voltdb::LibEventException();
  } else {
    result = (voltdb::LibEventException *)new SwigDirector_LibEventException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__LibEventException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_LibEventException_what) {
  voltdb::LibEventException *arg1 = (voltdb::LibEventException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"LibEventException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__LibEventException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LibEventException_what. Expected SWIGTYPE_p_voltdb__LibEventException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::LibEventException const *)arg1)->voltdb::LibEventException::what();
  } else {
    result = (char *)((voltdb::LibEventException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_LibEventException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::LibEventException *arg1 = (voltdb::LibEventException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::LibEventException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__LibEventException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::LibEventException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClusterInstanceMismatchException) {
  zval *arg0;
  zval **args[1];
  voltdb::ClusterInstanceMismatchException *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ClusterInstanceMismatchException *)new voltdb::ClusterInstanceMismatchException();
  } else {
    result = (voltdb::ClusterInstanceMismatchException *)new SwigDirector_ClusterInstanceMismatchException(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClusterInstanceMismatchException, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClusterInstanceMismatchException_what) {
  voltdb::ClusterInstanceMismatchException *arg1 = (voltdb::ClusterInstanceMismatchException *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ClusterInstanceMismatchException", (char *)"what");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClusterInstanceMismatchException, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClusterInstanceMismatchException_what. Expected SWIGTYPE_p_voltdb__ClusterInstanceMismatchException");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (char *)((voltdb::ClusterInstanceMismatchException const *)arg1)->voltdb::ClusterInstanceMismatchException::what();
  } else {
    result = (char *)((voltdb::ClusterInstanceMismatchException const *)arg1)->what();
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ClusterInstanceMismatchException(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ClusterInstanceMismatchException *arg1 = (voltdb::ClusterInstanceMismatchException *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ClusterInstanceMismatchException *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ClusterInstanceMismatchException TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ClusterInstanceMismatchException resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_wireTypeToString) {
  voltdb::WireType arg1 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (voltdb::WireType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = voltdb::wireTypeToString(arg1);

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameter__SWIG_0) {
  voltdb::Parameter *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::Parameter *)new voltdb::Parameter();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Parameter, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameter__SWIG_1) {
  voltdb::WireType arg1 ;
  bool arg2 ;
  zval **args[2];
  voltdb::Parameter *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (voltdb::WireType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  result = (voltdb::Parameter *)new voltdb::Parameter(arg1,arg2);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Parameter, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameter__SWIG_2) {
  voltdb::WireType arg1 ;
  zval **args[1];
  voltdb::Parameter *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (voltdb::WireType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (voltdb::Parameter *)new voltdb::Parameter(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Parameter, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameter__SWIG_3) {
  voltdb::Parameter *arg1 = 0 ;
  zval **args[1];
  voltdb::Parameter *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Parameter, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Parameter. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  result = (voltdb::Parameter *)new voltdb::Parameter((voltdb::Parameter const &)*arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Parameter, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Parameter) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Parameter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Parameter, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_Parameter__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Parameter__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL);
      if (_v) {
        return _wrap_new_Parameter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Parameter'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameter_m_type_set) {
  voltdb::Parameter *arg1 = (voltdb::Parameter *) 0 ;
  voltdb::WireType arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Parameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameter_m_type_set. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (voltdb::WireType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if (arg1) (arg1)->m_type = arg2;

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameter_m_type_get) {
  voltdb::Parameter *arg1 = (voltdb::Parameter *) 0 ;
  zval **args[1];
  voltdb::WireType result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Parameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameter_m_type_get. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::WireType) ((arg1)->m_type);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameter_m_array_set) {
  voltdb::Parameter *arg1 = (voltdb::Parameter *) 0 ;
  bool arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Parameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameter_m_array_set. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if (arg1) (arg1)->m_array = arg2;

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Parameter_m_array_get) {
  voltdb::Parameter *arg1 = (voltdb::Parameter *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Parameter, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Parameter_m_array_get. Expected SWIGTYPE_p_voltdb__Parameter");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool) ((arg1)->m_array);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Parameter(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Parameter *arg1 = (voltdb::Parameter *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Parameter *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Parameter TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Parameter resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_flip) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_flip. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::ByteBuffer *) &(arg1)->flip();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_clear) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_clear. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::ByteBuffer *) &(arg1)->clear();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_get__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_get. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    (arg1)->get(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_get__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  int32_t arg4 ;
  zval **args[4];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_get. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int32_t) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;

  try {
    (arg1)->get(arg2,arg3,arg4);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_get) {
  int argc;
  zval **argv[4];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_get__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING);
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG);
          if (_v) {
            return _wrap_ByteBuffer_get__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_get'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_put__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_put. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->put((char const *)arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_put__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  int32_t arg4 ;
  zval **args[4];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_put. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int32_t) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->put(arg2,(char const *)arg3,arg4);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_put__SWIG_2) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  voltdb::ByteBuffer *arg2 = (voltdb::ByteBuffer *) 0 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_put. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ByteBuffer_put. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  try {
    result = (voltdb::ByteBuffer *) &(arg1)->put(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_put) {
  int argc;
  zval **argv[4];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
      }
      if (_v) {
        return _wrap_ByteBuffer_put__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_put__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING);
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG);
          if (_v) {
            return _wrap_ByteBuffer_put__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_put'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt8__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt8. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int8_t)(arg1)->getInt8();
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt8__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt8. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int8_t)(arg1)->getInt8(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt8) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_getInt8__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_getInt8__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getInt8'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt8__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int8_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt8. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt8(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt8__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  int8_t arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt8. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int8_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt8(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt8) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_putInt8__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_putInt8__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putInt8'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt16__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int16_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt16. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int16_t)(arg1)->getInt16();
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt16__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int16_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt16. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int16_t)(arg1)->getInt16(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt16) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_getInt16__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_getInt16__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getInt16'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt16__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int16_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt16. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int16_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt16(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt16__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  int16_t arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt16. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int16_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt16(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt16) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_putInt16__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_putInt16__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putInt16'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt32__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt32. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int32_t)(arg1)->getInt32();
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt32__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt32. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int32_t)(arg1)->getInt32(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt32) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_getInt32__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_getInt32__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getInt32'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt32__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt32. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt32(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt32__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt32. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt32(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt32) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_putInt32__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_putInt32__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putInt32'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt64__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt64. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int64_t)(arg1)->getInt64();
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt64__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getInt64. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int64_t)(arg1)->getInt64(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getInt64) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_getInt64__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_getInt64__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getInt64'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt64__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int64_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt64. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int64_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt64(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt64__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  int64_t arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putInt64. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int64_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putInt64(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putInt64) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_putInt64__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ByteBuffer_putInt64__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putInt64'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getDouble__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  double result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getDouble. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (double)(arg1)->getDouble();
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getDouble__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  double result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getDouble. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (double)(arg1)->getDouble(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getDouble) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_getDouble__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_getDouble__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getDouble'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putDouble__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  double arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putDouble. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putDouble(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putDouble__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  double arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putDouble. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  arg3 = (double) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putDouble(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putDouble) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE);
      if (_v) {
        return _wrap_ByteBuffer_putDouble__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_DOUBLE);
        if (_v) {
          return _wrap_ByteBuffer_putDouble__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putDouble'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getString__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  bool *arg2 = 0 ;
  zval **args[2];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getString. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bool, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ByteBuffer_getString. Expected SWIGTYPE_p_bool");
    }
  }
  try {
    result = (arg1)->getString(*arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getString__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  bool *arg3 = 0 ;
  zval **args[3];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getString. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bool, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of ByteBuffer_getString. Expected SWIGTYPE_p_bool");
    }
  }
  try {
    result = (arg1)->getString(arg2,*arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getString) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bool, 0) >= 0);
      }
      if (_v) {
        return _wrap_ByteBuffer_getString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bool, 0) >= 0);
        }
        if (_v) {
          return _wrap_ByteBuffer_getString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putString__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  std::string arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putString. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putString(arg2);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getBytes__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  bool *arg2 = 0 ;
  int32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  zval **args[5];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getBytes. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bool, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ByteBuffer_getBytes. Expected SWIGTYPE_p_bool");
    }
  }

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of ByteBuffer_getBytes. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of ByteBuffer_getBytes. Expected SWIGTYPE_p_int");
    }
  }
  try {
    result = (bool)(arg1)->getBytes(*arg2,arg3,arg4,arg5);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getBytes__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  bool *arg3 = 0 ;
  int32_t arg4 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  zval **args[6];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_getBytes. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bool, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of ByteBuffer_getBytes. Expected SWIGTYPE_p_bool");
    }
  }

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int32_t) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of ByteBuffer_getBytes. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of ByteBuffer_getBytes. Expected SWIGTYPE_p_int");
    }
  }
  try {
    result = (bool)(arg1)->getBytes(arg2,*arg3,arg4,arg5,arg6);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_getBytes) {
  int argc;
  zval **argv[6];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bool, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              return _wrap_ByteBuffer_getBytes__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bool, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG);
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
              }
              if (_v) {
                return _wrap_ByteBuffer_getBytes__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
              }
            }
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_getBytes'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putBytes__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putBytes. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of ByteBuffer_putBytes. Expected SWIGTYPE_p_uint8_t");
    }
  }
  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putBytes(arg2,(uint8_t const *)arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putBytes__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  zval **args[4];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putBytes. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of ByteBuffer_putBytes. Expected SWIGTYPE_p_uint8_t");
    }
  }
  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putBytes(arg2,arg3,(uint8_t const *)arg4);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putBytes) {
  int argc;
  zval **argv[4];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
        }
        if (_v) {
          return _wrap_ByteBuffer_putBytes__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
          }
          if (_v) {
            return _wrap_ByteBuffer_putBytes__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putBytes'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putString__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  std::string arg3 ;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_putString. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->putString(arg2,arg3);
  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_putString) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_ByteBuffer_putString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          return _wrap_ByteBuffer_putString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_putString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_position__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_position. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->position();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_position__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_position. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->position(arg2);
  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_position) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_position__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_position__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_position'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_remaining) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_remaining. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->remaining();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_hasRemaining) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_hasRemaining. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->hasRemaining();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_limit__SWIG_0) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_limit. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->limit();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_limit__SWIG_1) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_limit. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ByteBuffer *) &(arg1)->limit(arg2);
  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_limit) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_ByteBuffer_limit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ByteBuffer_limit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ByteBuffer_limit'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_bytes) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  char *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_bytes. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char *)(arg1)->bytes();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_slice) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  SwigValueWrapper< voltdb::ByteBuffer > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_slice. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->slice();
  {
    voltdb::ByteBuffer * resultobj = new voltdb::ByteBuffer((const voltdb::ByteBuffer &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__ByteBuffer, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_isExpandable) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ByteBuffer", (char *)"isExpandable");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_isExpandable. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (bool)(arg1)->voltdb::ByteBuffer::isExpandable();
  } else {
    result = (bool)(arg1)->isExpandable();
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_ensureRemaining) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ByteBuffer", (char *)"ensureRemaining");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_ensureRemaining. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ByteBuffer::ensureRemaining(arg2);
    } else {
      (arg1)->ensureRemaining(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_ensureRemainingExact) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ByteBuffer", (char *)"ensureRemainingExact");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_ensureRemainingExact. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ByteBuffer::ensureRemainingExact(arg2);
    } else {
      (arg1)->ensureRemainingExact(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_ensureCapacity) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ByteBuffer", (char *)"ensureCapacity");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_ensureCapacity. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ByteBuffer::ensureCapacity(arg2);
    } else {
      (arg1)->ensureCapacity(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_ensureCapacityExact) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ByteBuffer", (char *)"ensureCapacityExact");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_ensureCapacityExact. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ByteBuffer::ensureCapacityExact(arg2);
    } else {
      (arg1)->ensureCapacityExact(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ByteBuffer__SWIG_0) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  zval *arg0;
  zval **args[3];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg1 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg2 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ByteBuffer *)new voltdb::ByteBuffer(arg1, arg2);
  } else {
    result = (voltdb::ByteBuffer *)new SwigDirector_ByteBuffer(arg0, arg1, arg2);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ByteBuffer__SWIG_1) {
  voltdb::ByteBuffer *arg1 = 0 ;
  zval *arg0;
  zval **args[2];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_ByteBuffer. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ByteBuffer *)new voltdb::ByteBuffer((voltdb::ByteBuffer const &)*arg1);
  } else {
    result = (voltdb::ByteBuffer *)new SwigDirector_ByteBuffer(arg0, (voltdb::ByteBuffer const &)*arg1);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ByteBuffer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ByteBuffer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ByteBuffer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ByteBuffer resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ByteBuffer_capacity) {
  voltdb::ByteBuffer *arg1 = (voltdb::ByteBuffer *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ByteBuffer_capacity. Expected SWIGTYPE_p_voltdb__ByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ByteBuffer__SWIG_2) {
  zval *arg0;
  zval **args[1];
  voltdb::ByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::ByteBuffer *)new SwigDirector_ByteBuffer(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ByteBuffer) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    return _wrap_new_ByteBuffer__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__ByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_ByteBuffer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
    if (_v) {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
      if (_v) {
        return _wrap_new_ByteBuffer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ByteBuffer'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_ensureRemaining) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"ensureRemaining");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_ensureRemaining. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ExpandableByteBuffer::ensureRemaining(arg2);
    } else {
      (arg1)->ensureRemaining(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_ensureRemainingExact) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"ensureRemainingExact");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_ensureRemainingExact. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ExpandableByteBuffer::ensureRemainingExact(arg2);
    } else {
      (arg1)->ensureRemainingExact(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_ensureCapacity) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"ensureCapacity");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_ensureCapacity. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ExpandableByteBuffer::ensureCapacity(arg2);
    } else {
      (arg1)->ensureCapacity(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_ensureCapacityExact) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"ensureCapacityExact");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_ensureCapacityExact. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    if (upcall) {
      (arg1)->voltdb::ExpandableByteBuffer::ensureCapacityExact(arg2);
    } else {
      (arg1)->ensureCapacityExact(arg2);
    }
  }
  catch(voltdb::NonExpandableBufferException &_e) {
    std::string name = "voltdb::NonExpandableBufferException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_isExpandable) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  zval **args[1];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"isExpandable");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_isExpandable. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  if (upcall) {
    result = (bool)(arg1)->voltdb::ExpandableByteBuffer::isExpandable();
  } else {
    result = (bool)(arg1)->isExpandable();
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ExpandableByteBuffer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ExpandableByteBuffer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ExpandableByteBuffer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ExpandableByteBuffer resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ExpandableByteBuffer__SWIG_0) {
  voltdb::ExpandableByteBuffer *arg1 = 0 ;
  zval *arg0;
  zval **args[2];
  voltdb::ExpandableByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_ExpandableByteBuffer. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::ExpandableByteBuffer *)new SwigDirector_ExpandableByteBuffer(arg0, (voltdb::ExpandableByteBuffer const &)*arg1);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ExpandableByteBuffer__SWIG_1) {
  zval *arg0;
  zval **args[1];
  voltdb::ExpandableByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::ExpandableByteBuffer *)new SwigDirector_ExpandableByteBuffer(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ExpandableByteBuffer__SWIG_2) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  zval *arg0;
  zval **args[3];
  voltdb::ExpandableByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg1 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg2 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::ExpandableByteBuffer *)new SwigDirector_ExpandableByteBuffer(arg0, arg1, arg2);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ExpandableByteBuffer) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    return _wrap_new_ExpandableByteBuffer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_ExpandableByteBuffer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
    if (_v) {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
      if (_v) {
        return _wrap_new_ExpandableByteBuffer__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ExpandableByteBuffer'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ExpandableByteBuffer_resetRef) {
  voltdb::ExpandableByteBuffer *arg1 = (voltdb::ExpandableByteBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_ExpandableByteBuffer *darg = 0;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ExpandableByteBuffer", (char *)"resetRef");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ExpandableByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ExpandableByteBuffer_resetRef. Expected SWIGTYPE_p_voltdb__ExpandableByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;

  darg = dynamic_cast<SwigDirector_ExpandableByteBuffer *>(arg1);
  if (upcall) {
    Swig::DirectorPureVirtualException::raise("voltdb::ExpandableByteBuffer::resetRef");
  } else {
    (darg)->resetRef(arg2);
  }

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_SharedByteBuffer__SWIG_0) {
  voltdb::SharedByteBuffer *arg1 = 0 ;
  zval *arg0;
  zval **args[2];
  voltdb::SharedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg1, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_SharedByteBuffer. Expected SWIGTYPE_p_voltdb__SharedByteBuffer");
    }
  }
  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::SharedByteBuffer *)new voltdb::SharedByteBuffer((voltdb::SharedByteBuffer const &)*arg1);
  } else {
    result = (voltdb::SharedByteBuffer *)new SwigDirector_SharedByteBuffer(arg0, (voltdb::SharedByteBuffer const &)*arg1);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__SharedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_SharedByteBuffer__SWIG_1) {
  zval *arg0;
  zval **args[1];
  voltdb::SharedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::SharedByteBuffer *)new voltdb::SharedByteBuffer();
  } else {
    result = (voltdb::SharedByteBuffer *)new SwigDirector_SharedByteBuffer(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__SharedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_SharedByteBuffer_slice) {
  voltdb::SharedByteBuffer *arg1 = (voltdb::SharedByteBuffer *) 0 ;
  zval **args[1];
  voltdb::SharedByteBuffer result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SharedByteBuffer_slice. Expected SWIGTYPE_p_voltdb__SharedByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->slice();
  {
    voltdb::SharedByteBuffer * resultobj = new voltdb::SharedByteBuffer((const voltdb::SharedByteBuffer &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__SharedByteBuffer, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_SharedByteBuffer__SWIG_2) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  zval *arg0;
  zval **args[3];
  voltdb::SharedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg1 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg2 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::SharedByteBuffer *)new voltdb::SharedByteBuffer(arg1, arg2);
  } else {
    result = (voltdb::SharedByteBuffer *)new SwigDirector_SharedByteBuffer(arg0, arg1, arg2);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__SharedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_SharedByteBuffer__SWIG_3) {
  boost::shared_array< char > arg1 ;
  int32_t arg2 ;
  boost::shared_array< char > *tmp1 ;
  zval *arg0;
  zval **args[3];
  voltdb::SharedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp1, SWIGTYPE_p_boost__shared_arrayT_char_t, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_SharedByteBuffer. Expected SWIGTYPE_p_boost__shared_arrayT_char_t");
    }
    arg1 = *tmp1;
  }

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg2 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::SharedByteBuffer *)new voltdb::SharedByteBuffer(arg1, arg2);
  } else {
    result = (voltdb::SharedByteBuffer *)new SwigDirector_SharedByteBuffer(arg0, arg1, arg2);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__SharedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_SharedByteBuffer) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    return _wrap_new_SharedByteBuffer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_SharedByteBuffer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_boost__shared_arrayT_char_t, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
      if (_v) {
        return _wrap_new_SharedByteBuffer__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
    if (_v) {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
      if (_v) {
        return _wrap_new_SharedByteBuffer__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_SharedByteBuffer'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_SharedByteBuffer_resetRef) {
  voltdb::SharedByteBuffer *arg1 = (voltdb::SharedByteBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_SharedByteBuffer *darg = 0;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"SharedByteBuffer", (char *)"resetRef");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SharedByteBuffer_resetRef. Expected SWIGTYPE_p_voltdb__SharedByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;

  darg = dynamic_cast<SwigDirector_SharedByteBuffer *>(arg1);
  if (upcall) {
    (darg)->resetRefSwigPublic(arg2);
  } else {
    (darg)->resetRef(arg2);
  }

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_SharedByteBuffer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::SharedByteBuffer *arg1 = (voltdb::SharedByteBuffer *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::SharedByteBuffer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__SharedByteBuffer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::SharedByteBuffer resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ScopedByteBuffer__SWIG_0) {
  int32_t arg1 ;
  zval *arg0;
  zval **args[2];
  voltdb::ScopedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg1 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ScopedByteBuffer *)new voltdb::ScopedByteBuffer(arg1);
  } else {
    result = (voltdb::ScopedByteBuffer *)new SwigDirector_ScopedByteBuffer(arg0, arg1);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ScopedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ScopedByteBuffer__SWIG_1) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  zval *arg0;
  zval **args[3];
  voltdb::ScopedByteBuffer *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg1 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg2 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ScopedByteBuffer *)new voltdb::ScopedByteBuffer(arg1, arg2);
  } else {
    result = (voltdb::ScopedByteBuffer *)new SwigDirector_ScopedByteBuffer(arg0, arg1, arg2);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ScopedByteBuffer, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ScopedByteBuffer) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
    if (_v) {
      return _wrap_new_ScopedByteBuffer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[1]) == IS_STRING);
    if (_v) {
      _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
      if (_v) {
        return _wrap_new_ScopedByteBuffer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ScopedByteBuffer'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ScopedByteBuffer_resetRef) {
  voltdb::ScopedByteBuffer *arg1 = (voltdb::ScopedByteBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_ScopedByteBuffer *darg = 0;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ScopedByteBuffer", (char *)"resetRef");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ScopedByteBuffer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ScopedByteBuffer_resetRef. Expected SWIGTYPE_p_voltdb__ScopedByteBuffer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;

  darg = dynamic_cast<SwigDirector_ScopedByteBuffer *>(arg1);
  if (upcall) {
    (darg)->resetRefSwigPublic(arg2);
  } else {
    (darg)->resetRef(arg2);
  }

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ScopedByteBuffer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ScopedByteBuffer *arg1 = (voltdb::ScopedByteBuffer *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ScopedByteBuffer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ScopedByteBuffer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ScopedByteBuffer resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Decimal__SWIG_0) {
  voltdb::Decimal *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::Decimal *)new voltdb::Decimal();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Decimal, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Decimal__SWIG_1) {
  std::string arg1 ;
  zval **args[1];
  voltdb::Decimal *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));

  result = (voltdb::Decimal *)new voltdb::Decimal(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Decimal, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Decimal__SWIG_2) {
  char *arg1 ;
  zval **args[1];
  voltdb::Decimal *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  result = (voltdb::Decimal *)new voltdb::Decimal(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Decimal, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Decimal) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Decimal__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_char, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_Decimal__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 1) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      return _wrap_new_Decimal__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Decimal'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Decimal_getDecimal__SWIG_0) {
  voltdb::Decimal *arg1 = (voltdb::Decimal *) 0 ;
  zval **args[1];
  voltdb::TTInt *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Decimal, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Decimal_getDecimal. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::TTInt *) &(arg1)->getDecimal();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ttmath__IntT_4_t, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Decimal_getDecimal__SWIG_1) {
  voltdb::Decimal *arg1 = (voltdb::Decimal *) 0 ;
  zval **args[1];
  voltdb::TTInt *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Decimal, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Decimal_getDecimal. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::TTInt *) &((voltdb::Decimal const *)arg1)->getDecimal();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_ttmath__IntT_4_t, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Decimal_getDecimal) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Decimal, 0) >= 0);
    }
    if (_v) {
      return _wrap_Decimal_getDecimal__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Decimal, 0) >= 0);
    }
    if (_v) {
      return _wrap_Decimal_getDecimal__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Decimal_getDecimal'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Decimal_toString) {
  voltdb::Decimal *arg1 = (voltdb::Decimal *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Decimal, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Decimal_toString. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->toString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Decimal_isNull) {
  voltdb::Decimal *arg1 = (voltdb::Decimal *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Decimal, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Decimal_isNull. Expected SWIGTYPE_p_voltdb__Decimal");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->isNull();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Decimal(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Decimal *arg1 = (voltdb::Decimal *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Decimal *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Decimal TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Decimal resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addBytes) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int32_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  zval **args[3];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addBytes. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of ParameterSet_addBytes. Expected SWIGTYPE_p_uint8_t");
    }
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addBytes(arg2,(uint8_t const *)arg3);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDecimal__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  voltdb::Decimal arg2 ;
  voltdb::Decimal *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addDecimal. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_voltdb__Decimal, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addDecimal. Expected SWIGTYPE_p_voltdb__Decimal");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addDecimal(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDecimal__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< voltdb::Decimal > arg2 ;
  std::vector< voltdb::Decimal > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addDecimal. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addDecimal. Expected SWIGTYPE_p_std__vectorT_voltdb__Decimal_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addDecimal(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDecimal) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_voltdb__Decimal, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addDecimal__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addDecimal__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addDecimal'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addTimestamp__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int64_t arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addTimestamp. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int64_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addTimestamp(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addTimestamp__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< int64_t > arg2 ;
  std::vector< int64_t > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addTimestamp. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_long_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addTimestamp. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addTimestamp(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addTimestamp) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_long_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addTimestamp__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ParameterSet_addTimestamp__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addTimestamp'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt64__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int64_t arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt64. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int64_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt64(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt64__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< int64_t > arg2 ;
  std::vector< int64_t > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt64. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_long_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addInt64. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt64(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt64) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_long_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addInt64__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ParameterSet_addInt64__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addInt64'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt32__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt32. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt32(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt32__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< int32_t > arg2 ;
  std::vector< int32_t > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt32. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addInt32. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt32(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt32) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_int_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addInt32__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ParameterSet_addInt32__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addInt32'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt16__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int16_t arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt16. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int16_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt16(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt16__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< int16_t > arg2 ;
  std::vector< int16_t > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt16. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_short_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addInt16. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt16(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt16) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_short_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addInt16__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ParameterSet_addInt16__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addInt16'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt8__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  int8_t arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt8. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int8_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt8(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt8__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< int8_t > arg2 ;
  std::vector< int8_t > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addInt8. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_signed_char_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addInt8. Expected SWIGTYPE_p_std__vectorT_signed_char_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addInt8(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addInt8) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_signed_char_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addInt8__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_ParameterSet_addInt8__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addInt8'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDouble__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  double arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addDouble. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addDouble(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDouble__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addDouble. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addDouble. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addDouble(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addDouble) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_double_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addDouble__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE);
      if (_v) {
        return _wrap_ParameterSet_addDouble__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addDouble'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addNull) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  zval **args[1];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addNull. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addNull();
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addString__SWIG_0) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::string arg2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addString. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (voltdb::ParameterSet *) &(arg1)->addString(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addString__SWIG_1) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *tmp2 ;
  zval **args[2];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_addString. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ParameterSet_addString. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
    arg2 = *tmp2;
  }
  try {
    result = (voltdb::ParameterSet *) &(arg1)->addString(arg2);
  }
  catch(voltdb::ParamMismatchException &_e) {
    std::string name = "voltdb::ParamMismatchException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_addString) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_std__vectorT_std__string_t, 0) >= 0);
      }
      if (_v) {
        return _wrap_ParameterSet_addString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ParameterSet, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_ParameterSet_addString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ParameterSet_addString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_reset) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_reset. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->reset();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ParameterSet_getSerializedSize) {
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ParameterSet, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ParameterSet_getSerializedSize. Expected SWIGTYPE_p_voltdb__ParameterSet");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->getSerializedSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ParameterSet(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ParameterSet *arg1 = (voltdb::ParameterSet *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ParameterSet *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ParameterSet TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ParameterSet resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Procedure) {
  std::string arg1 ;
  std::vector< voltdb::Parameter > arg2 ;
  std::vector< voltdb::Parameter > *tmp2 ;
  zval **args[2];
  voltdb::Procedure *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));

  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_Procedure. Expected SWIGTYPE_p_std__vectorT_voltdb__Parameter_t");
    }
    arg2 = *tmp2;
  }
  result = (voltdb::Procedure *)new voltdb::Procedure(arg1,arg2);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Procedure, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Procedure_params) {
  voltdb::Procedure *arg1 = (voltdb::Procedure *) 0 ;
  zval **args[1];
  voltdb::ParameterSet *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Procedure, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Procedure_params. Expected SWIGTYPE_p_voltdb__Procedure");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::ParameterSet *)(arg1)->params();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ParameterSet, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Procedure_getSerializedSize) {
  voltdb::Procedure *arg1 = (voltdb::Procedure *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Procedure, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Procedure_getSerializedSize. Expected SWIGTYPE_p_voltdb__Procedure");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->getSerializedSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Procedure(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Procedure *arg1 = (voltdb::Procedure *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Procedure *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Procedure TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Procedure resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_clientData) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_clientData. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int64_t)(arg1)->clientData();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_statusCode) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_statusCode. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int8_t)(arg1)->statusCode();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_success) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_success. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->success();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_failure) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_failure. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->failure();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_statusString) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_statusString. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->statusString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_appStatusCode) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_appStatusCode. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int8_t)(arg1)->appStatusCode();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_appStatusString) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_appStatusString. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->appStatusString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_clusterRoundTripTime) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_clusterRoundTripTime. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->clusterRoundTripTime();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_results) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  std::vector< voltdb::Table > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_results. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->results();
  {
    std::vector< voltdb::Table > * resultobj = new std::vector< voltdb::Table >((const std::vector< voltdb::Table > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_voltdb__Table_t, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_InvocationResponse_toString) {
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of InvocationResponse_toString. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->toString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_InvocationResponse(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::InvocationResponse *arg1 = (voltdb::InvocationResponse *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::InvocationResponse *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__InvocationResponse TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::InvocationResponse resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ProcedureCallbackNative_callback) {
  voltdb::ProcedureCallback *arg1 = (voltdb::ProcedureCallback *) 0 ;
  voltdb::InvocationResponse arg2 ;
  voltdb::InvocationResponse *tmp2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"ProcedureCallbackNative", (char *)"callback");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ProcedureCallback, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ProcedureCallbackNative_callback. Expected SWIGTYPE_p_voltdb__ProcedureCallback");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ProcedureCallbackNative_callback. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
    arg2 = *tmp2;
  }
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("voltdb::ProcedureCallback::callback");
    } else {
      result = (bool)(arg1)->callback(arg2);
    }
  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ProcedureCallbackNative(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ProcedureCallback *arg1 = (voltdb::ProcedureCallback *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ProcedureCallback *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ProcedureCallback TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ProcedureCallback resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ProcedureCallbackNative) {
  zval *arg0;
  zval **args[1];
  voltdb::ProcedureCallback *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::ProcedureCallback *)new SwigDirector_ProcedureCallbackNative(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ProcedureCallback, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_createConnection__SWIG_0) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  std::string arg2 ;
  short arg3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_createConnection. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  try {
    (arg1)->createConnection(arg2,arg3);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_createConnection__SWIG_1) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  std::string arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_createConnection. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    (arg1)->createConnection(arg2);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_createConnection) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Client, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_ClientNative_createConnection__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Client, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          return _wrap_ClientNative_createConnection__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ClientNative_createConnection'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_invoke__SWIG_0) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  voltdb::Procedure *arg2 = 0 ;
  zval **args[2];
  voltdb::InvocationResponse result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_invoke. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Procedure, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ClientNative_invoke. Expected SWIGTYPE_p_voltdb__Procedure");
    }
  }
  try {
    result = (arg1)->invoke(*arg2);
  }
  catch(voltdb::NoConnectionsException &_e) {
    std::string name = "voltdb::NoConnectionsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::UninitializedParamsException &_e) {
    std::string name = "voltdb::UninitializedParamsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::InvocationResponse * resultobj = new voltdb::InvocationResponse((const voltdb::InvocationResponse &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__InvocationResponse, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_invoke__SWIG_1) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  voltdb::Procedure *arg2 = 0 ;
  voltdb::ProcedureCallback *arg3 = (voltdb::ProcedureCallback *) 0 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_invoke. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_voltdb__Procedure, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ClientNative_invoke. Expected SWIGTYPE_p_voltdb__Procedure");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__ProcedureCallback, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of ClientNative_invoke. Expected SWIGTYPE_p_voltdb__ProcedureCallback");
    }
  }
  try {
    (arg1)->invoke(*arg2,arg3);
  }
  catch(voltdb::NoConnectionsException &_e) {
    std::string name = "voltdb::NoConnectionsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::UninitializedParamsException &_e) {
    std::string name = "voltdb::UninitializedParamsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_invoke) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Client, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__Procedure, 0) >= 0);
      }
      if (_v) {
        return _wrap_ClientNative_invoke__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Client, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_voltdb__Procedure, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_voltdb__ProcedureCallback, 0) >= 0);
        }
        if (_v) {
          return _wrap_ClientNative_invoke__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ClientNative_invoke'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_runOnce) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_runOnce. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    (arg1)->runOnce();
  }
  catch(voltdb::NoConnectionsException &_e) {
    std::string name = "voltdb::NoConnectionsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_run) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_run. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    (arg1)->run();
  }
  catch(voltdb::NoConnectionsException &_e) {
    std::string name = "voltdb::NoConnectionsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_drain) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_drain. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (bool)(arg1)->drain();
  }
  catch(voltdb::NoConnectionsException &_e) {
    std::string name = "voltdb::NoConnectionsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_interrupt) {
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Client, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_interrupt. Expected SWIGTYPE_p_voltdb__Client");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->interrupt();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_create__SWIG_0) {
  voltdb::ClientConfig arg1 ;
  voltdb::ClientConfig *tmp1 ;
  zval **args[1];
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientNative_create. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
    arg1 = *tmp1;
  }
  try {
    result = voltdb::Client::create(arg1);
  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_create__SWIG_1) {
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  try {
    result = voltdb::Client::create();
  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientNative_create) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_ClientNative_create__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_voltdb__ClientConfig, 0) >= 0);
    }
    if (_v) {
      return _wrap_ClientNative_create__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ClientNative_create'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ClientNative(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Client *arg1 = (voltdb::Client *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Client *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Client TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Client resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getVarbinary__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  zval **args[5];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getVarbinary. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Row_getVarbinary. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of Row_getVarbinary. Expected SWIGTYPE_p_int");
    }
  }
  try {
    result = (bool)(arg1)->getVarbinary(arg2,arg3,arg4,arg5);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDecimal__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  voltdb::Decimal result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getDecimal. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (arg1)->getDecimal(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Decimal * resultobj = new voltdb::Decimal((const voltdb::Decimal &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Decimal, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getTimestamp__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getTimestamp. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int64_t)(arg1)->getTimestamp(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt64__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt64. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int64_t)(arg1)->getInt64(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt32__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt32. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int32_t)(arg1)->getInt32(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt16__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int16_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt16. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int16_t)(arg1)->getInt16(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt8__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt8. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (int8_t)(arg1)->getInt8(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDouble__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  double result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getDouble. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (double)(arg1)->getDouble(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getString__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getString. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (arg1)->getString(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_isNull__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  int32_t arg2 ;
  zval **args[2];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_isNull. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  try {
    result = (bool)(arg1)->isNull(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getVarbinary__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  int32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  zval **args[5];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getVarbinary. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of Row_getVarbinary. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of Row_getVarbinary. Expected SWIGTYPE_p_int");
    }
  }
  try {
    result = (bool)(arg1)->getVarbinary(arg2,arg3,arg4,arg5);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getVarbinary) {
  int argc;
  zval **argv[5];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              return _wrap_Row_getVarbinary__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG);
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              return _wrap_Row_getVarbinary__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getVarbinary'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDecimal__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  voltdb::Decimal result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getDecimal. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (arg1)->getDecimal(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Decimal * resultobj = new voltdb::Decimal((const voltdb::Decimal &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Decimal, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDecimal) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getDecimal__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getDecimal__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getDecimal'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getTimestamp__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getTimestamp. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (int64_t)(arg1)->getTimestamp(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getTimestamp) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getTimestamp__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getTimestamp__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getTimestamp'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt64__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  int64_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt64. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (int64_t)(arg1)->getInt64(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt64) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getInt64__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getInt64__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getInt64'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt32__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt32. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (int32_t)(arg1)->getInt32(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt32) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getInt32__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getInt32__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getInt32'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt16__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  int16_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt16. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (int16_t)(arg1)->getInt16(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt16) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getInt16__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getInt16__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getInt16'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt8__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getInt8. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (int8_t)(arg1)->getInt8(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getInt8) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getInt8__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getInt8__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getInt8'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDouble__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  double result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getDouble. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (double)(arg1)->getDouble(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getDouble) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getDouble__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getDouble__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getDouble'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getString__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_getString. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (arg1)->getString(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }


  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_getString) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_getString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_getString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_getString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_isNull__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::string arg2 ;
  zval **args[2];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_isNull. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  try {
    result = (bool)(arg1)->isNull(arg2);
  }
  catch(voltdb::InvalidColumnException &_e) {
    std::string name = "voltdb::InvalidColumnException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_isNull) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_Row_isNull__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_Row_isNull__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_isNull'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_wasNull) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_wasNull. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->wasNull();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_toString__SWIG_0) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_toString. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->toString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_toString__SWIG_1) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  std::ostringstream *arg2 = 0 ;
  std::string arg3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_toString. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostringstream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Row_toString. Expected SWIGTYPE_p_std__ostringstream");
    }
  }

  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));

  (arg1)->toString(*arg2,arg3);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_toString) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      return _wrap_Row_toString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Row, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__ostringstream, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          return _wrap_Row_toString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Row_toString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_columnCount) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_columnCount. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->columnCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Row_columns) {
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;
  zval **args[1];
  std::vector< voltdb::Column > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Row, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Row_columns. Expected SWIGTYPE_p_voltdb__Row");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->columns();
  {
    std::vector< voltdb::Column > * resultobj = new std::vector< voltdb::Column >((const std::vector< voltdb::Column > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Row(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Row *arg1 = (voltdb::Row *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Row *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Row TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Row resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_TableIterator_hasNext) {
  voltdb::TableIterator *arg1 = (voltdb::TableIterator *) 0 ;
  zval **args[1];
  bool result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__TableIterator, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TableIterator_hasNext. Expected SWIGTYPE_p_voltdb__TableIterator");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->hasNext();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_TableIterator_next) {
  voltdb::TableIterator *arg1 = (voltdb::TableIterator *) 0 ;
  zval **args[1];
  SwigValueWrapper< voltdb::Row > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__TableIterator, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TableIterator_next. Expected SWIGTYPE_p_voltdb__TableIterator");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (arg1)->next();
  }
  catch(voltdb::NoMoreRowsException &_e) {
    std::string name = "voltdb::NoMoreRowsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::OverflowUnderflowException &_e) {
    std::string name = "voltdb::OverflowUnderflowException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::IndexOutOfBoundsException &_e) {
    std::string name = "voltdb::IndexOutOfBoundsException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Row * resultobj = new voltdb::Row((const voltdb::Row &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Row, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TableIterator(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::TableIterator *arg1 = (voltdb::TableIterator *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::TableIterator *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__TableIterator TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::TableIterator resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Table__SWIG_0) {
  voltdb::SharedByteBuffer arg1 ;
  voltdb::SharedByteBuffer *tmp1 ;
  zval **args[1];
  voltdb::Table *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_Table. Expected SWIGTYPE_p_voltdb__SharedByteBuffer");
    }
    arg1 = *tmp1;
  }
  result = (voltdb::Table *)new voltdb::Table(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Table, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Table__SWIG_1) {
  voltdb::Table *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::Table *)new voltdb::Table();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Table, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Table) {
  int argc;
  zval **argv[1];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Table__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_voltdb__SharedByteBuffer, 0) >= 0);
    }
    if (_v) {
      return _wrap_new_Table__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Table'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Table(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Table *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Table TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Table resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_iterator) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  SwigValueWrapper< voltdb::TableIterator > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_iterator. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->iterator();
  {
    voltdb::TableIterator * resultobj = new voltdb::TableIterator((const voltdb::TableIterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__TableIterator, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_getStatusCode) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  int8_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_getStatusCode. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int8_t)(arg1)->getStatusCode();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_rowCount) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_rowCount. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->rowCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_columns) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  std::vector< voltdb::Column > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_columns. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->columns();
  {
    std::vector< voltdb::Column > * resultobj = new std::vector< voltdb::Column >((const std::vector< voltdb::Column > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_voltdb__Column_t, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_columnCount) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_columnCount. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t)(arg1)->columnCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_toString__SWIG_0) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_toString. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->toString();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_toString__SWIG_1) {
  voltdb::Table *arg1 = (voltdb::Table *) 0 ;
  std::ostringstream *arg2 = 0 ;
  std::string arg3 ;
  zval **args[3];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Table_toString. Expected SWIGTYPE_p_voltdb__Table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__ostringstream, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Table_toString. Expected SWIGTYPE_p_std__ostringstream");
    }
  }

  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));

  (arg1)->toString(*arg2,arg3);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Table_toString) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Table, 0) >= 0);
    }
    if (_v) {
      return _wrap_Table_toString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__Table, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__ostringstream, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          return _wrap_Table_toString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Table_toString'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StatusListenerNative_uncaughtException) {
  voltdb::StatusListener *arg1 = (voltdb::StatusListener *) 0 ;
  std::exception arg2 ;
  boost::shared_ptr< voltdb::ProcedureCallback > arg3 ;
  voltdb::InvocationResponse arg4 ;
  std::exception *tmp2 ;
  boost::shared_ptr< voltdb::ProcedureCallback > *tmp3 ;
  voltdb::InvocationResponse *tmp4 ;
  zval **args[4];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"StatusListenerNative", (char *)"uncaughtException");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StatusListenerNative_uncaughtException. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__exception, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StatusListenerNative_uncaughtException. Expected SWIGTYPE_p_std__exception");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of StatusListenerNative_uncaughtException. Expected SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_voltdb__InvocationResponse, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of StatusListenerNative_uncaughtException. Expected SWIGTYPE_p_voltdb__InvocationResponse");
    }
    arg4 = *tmp4;
  }
  if (upcall) {
    Swig::DirectorPureVirtualException::raise("voltdb::StatusListener::uncaughtException");
  } else {
    result = (bool)(arg1)->uncaughtException(arg2,arg3,arg4);
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StatusListenerNative_connectionLost) {
  voltdb::StatusListener *arg1 = (voltdb::StatusListener *) 0 ;
  std::string arg2 ;
  int32_t arg3 ;
  zval **args[3];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"StatusListenerNative", (char *)"connectionLost");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StatusListenerNative_connectionLost. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int32_t) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;

  if (upcall) {
    Swig::DirectorPureVirtualException::raise("voltdb::StatusListener::connectionLost");
  } else {
    result = (bool)(arg1)->connectionLost(arg2,arg3);
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_StatusListenerNative_backpressure) {
  voltdb::StatusListener *arg1 = (voltdb::StatusListener *) 0 ;
  bool arg2 ;
  zval **args[2];
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;

  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"StatusListenerNative", (char *)"backpressure");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StatusListenerNative_backpressure. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if (upcall) {
    Swig::DirectorPureVirtualException::raise("voltdb::StatusListener::backpressure");
  } else {
    result = (bool)(arg1)->backpressure(arg2);
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StatusListenerNative(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::StatusListener *arg1 = (voltdb::StatusListener *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::StatusListener *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__StatusListener TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::StatusListener resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_StatusListenerNative) {
  zval *arg0;
  zval **args[1];
  voltdb::StatusListener *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    SWIG_PHP_Error(E_ERROR, "accessing abstract class or protected constructor");
  } else {
    result = (voltdb::StatusListener *)new SwigDirector_StatusListenerNative(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__StatusListener, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Column__SWIG_0) {
  voltdb::Column *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::Column *)new voltdb::Column();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Column, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Column__SWIG_1) {
  std::string arg1 ;
  voltdb::WireType arg2 ;
  zval **args[2];
  voltdb::Column *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (voltdb::WireType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  result = (voltdb::Column *)new voltdb::Column(arg1,arg2);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Column, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Column__SWIG_2) {
  voltdb::WireType arg1 ;
  zval **args[1];
  voltdb::Column *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (voltdb::WireType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;

  result = (voltdb::Column *)new voltdb::Column(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__Column, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_Column) {
  int argc;
  zval **argv[2];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_Column__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG);
    if (_v) {
      return _wrap_new_Column__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG);
      if (_v) {
        return _wrap_new_Column__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Column'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_m_name_set) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_m_name_set. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;

  if (arg1) (arg1)->m_name = *arg2;


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_m_name_get) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  zval **args[1];
  std::string *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_m_name_get. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->m_name);

  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_m_type_set) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  voltdb::WireType arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_m_type_set. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (voltdb::WireType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if (arg1) (arg1)->m_type = arg2;

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_m_type_get) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  zval **args[1];
  voltdb::WireType result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_m_type_get. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::WireType) ((arg1)->m_type);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_name) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  zval **args[1];
  std::string result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_name. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->name();

  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_Column_type) {
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;
  zval **args[1];
  voltdb::WireType result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__Column, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Column_type. Expected SWIGTYPE_p_voltdb__Column");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (voltdb::WireType)(arg1)->type();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Column(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::Column *arg1 = (voltdb::Column *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::Column *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__Column TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::Column resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_cleanupOnScriptEnd) {
  voltdb::ClientSet *arg1 = (voltdb::ClientSet *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of cleanupOnScriptEnd. Expected SWIGTYPE_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t");
    }
  }
  voltdb::cleanupOnScriptEnd(arg1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ConnectionPool) {
  zval *arg0;
  zval **args[1];
  voltdb::ConnectionPool *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  arg0 = *args[0];

  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (voltdb::ConnectionPool *)new voltdb::ConnectionPool();
  } else {
    result = (voltdb::ConnectionPool *)new SwigDirector_ConnectionPool(arg0);
  }


  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ConnectionPool, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ConnectionPool(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ConnectionPool *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ConnectionPool TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ConnectionPool resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_acquireClient__SWIG_0) {
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  short arg5 ;
  zval **args[5];
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectionPool, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__ConnectionPool");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));


  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));


  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (short) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;

  try {
    result = (arg1)->acquireClient(arg2,arg3,arg4,arg5);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_acquireClient__SWIG_1) {
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectionPool, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__ConnectionPool");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));


  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));

  try {
    result = (arg1)->acquireClient(arg2,arg3,arg4);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_acquireClient__SWIG_2) {
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  voltdb::StatusListener *arg5 = (voltdb::StatusListener *) 0 ;
  short arg6 ;
  zval **args[6];
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectionPool, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__ConnectionPool");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));


  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));

  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (short) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;

  try {
    result = (arg1)->acquireClient(arg2,arg3,arg4,arg5,arg6);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_acquireClient__SWIG_3) {
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  voltdb::StatusListener *arg5 = (voltdb::StatusListener *) 0 ;
  zval **args[5];
  SwigValueWrapper< voltdb::Client > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectionPool, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__ConnectionPool");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));


  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));


  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));

  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of ConnectionPool_acquireClient. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }
  try {
    result = (arg1)->acquireClient(arg2,arg3,arg4,arg5);
  }
  catch(voltdb::ConnectException &_e) {
    std::string name = "voltdb::ConnectException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::LibEventException &_e) {
    std::string name = "voltdb::LibEventException";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }
  catch(voltdb::Exception &_e) {
    std::string name = "voltdb::Exception";
    if (name.substr(0, 8).compare("voltdb::") == 0) {
      name = name.substr(8, name.length());
    }

    long code = 0;
    if (name.compare("NullPointerException") == 0) {
      code = 1;
    } else if (name.compare("InvalidColumnException") == 0) {
      code = 2;
    } else if (name.compare("OverflowUnderflowException") == 0) {
      code = 3;
    } else if (name.compare("IndexOutOfBoundsException") == 0) {
      code = 4;
    } else if (name.compare("NonExpandableBufferException") == 0) {
      code = 5;
    } else if (name.compare("UninitializedParamsException") == 0) {
      code = 6;
    } else if (name.compare("ParamMismatchException") == 0) {
      code = 7;
    } else if (name.compare("NoMoreRowsException") == 0) {
      code = 8;
    } else if (name.compare("StringToDecimalException") == 0) {
      code = 9;
    } else if (name.compare("ConnectException") == 0) {
      code = 10;
    } else if (name.compare("NoConnectionsException") == 0) {
      code = 11;
    } else if (name.compare("LibEventException") == 0) {
      code = 12;
    }

    zend_throw_exception(
      zend_exception_get_default(),
      const_cast<char*>((&_e)->what()),
      code TSRMLS_CC);
    return;

  }

  {
    voltdb::Client * resultobj = new voltdb::Client((const voltdb::Client &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_voltdb__Client, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_acquireClient) {
  int argc;
  zval **argv[6];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ConnectionPool, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;

          if (_v) {
            return _wrap_ConnectionPool_acquireClient__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ConnectionPool, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;

          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_voltdb__StatusListener, 0) >= 0);
            }
            if (_v) {
              return _wrap_ConnectionPool_acquireClient__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ConnectionPool, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;

          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG);
            if (_v) {
              return _wrap_ConnectionPool_acquireClient__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_voltdb__ConnectionPool, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;

        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;

          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_voltdb__StatusListener, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG);
              if (_v) {
                return _wrap_ConnectionPool_acquireClient__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
              }
            }
          }
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'ConnectionPool_acquireClient'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_onScriptEnd) {
  voltdb::ConnectionPool *arg1 = (voltdb::ConnectionPool *) 0 ;
  zval **args[1];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ConnectionPool, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ConnectionPool_onScriptEnd. Expected SWIGTYPE_p_voltdb__ConnectionPool");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->onScriptEnd();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ConnectionPool_pool) {
  voltdb::ConnectionPool *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::ConnectionPool *)voltdb::ConnectionPool::pool();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ConnectionPool, 0);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_onLoad) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  voltdb::onLoad();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_onUnload) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  voltdb::onUnload();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_onScriptEnd) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  voltdb::onScriptEnd();

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  voltdb::ClientConfig *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));


  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  result = (voltdb::ClientConfig *)new voltdb::ClientConfig(arg1,arg2);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClientConfig, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative__SWIG_1) {
  std::string arg1 ;
  zval **args[1];
  voltdb::ClientConfig *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));

  result = (voltdb::ClientConfig *)new voltdb::ClientConfig(arg1);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClientConfig, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative__SWIG_2) {
  voltdb::ClientConfig *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }

  result = (voltdb::ClientConfig *)new voltdb::ClientConfig();

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClientConfig, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative__SWIG_3) {
  std::string arg1 ;
  std::string arg2 ;
  boost::shared_ptr< voltdb::StatusListener > arg3 ;
  boost::shared_ptr< voltdb::StatusListener > *tmp3 ;
  zval **args[3];
  voltdb::ClientConfig *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));


  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_ClientConfigNative. Expected SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t");
    }
    arg3 = *tmp3;
  }
  result = (voltdb::ClientConfig *)new voltdb::ClientConfig(arg1,arg2,arg3);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClientConfig, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative__SWIG_4) {
  std::string arg1 ;
  std::string arg2 ;
  voltdb::StatusListener *arg3 = (voltdb::StatusListener *) 0 ;
  zval **args[3];
  voltdb::ClientConfig *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }


  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));


  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));

  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_voltdb__StatusListener, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_ClientConfigNative. Expected SWIGTYPE_p_voltdb__StatusListener");
    }
  }
  result = (voltdb::ClientConfig *)new voltdb::ClientConfig(arg1,arg2,arg3);

  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_voltdb__ClientConfig, 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_new_ClientConfigNative) {
  int argc;
  zval **argv[3];

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    return _wrap_new_ClientConfigNative__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
  }
  if (argc == 1) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      return _wrap_new_ClientConfigNative__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
    }
  }
  if (argc == 2) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        return _wrap_new_ClientConfigNative__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
      }
    }
  }
  if (argc == 3) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t, 0) >= 0);
        }
        if (_v) {
          return _wrap_new_ClientConfigNative__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;

    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;

    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;

      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_voltdb__StatusListener, 0) >= 0);
        }
        if (_v) {
          return _wrap_new_ClientConfigNative__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
      }
    }
  }

  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ClientConfigNative'";
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_username_set) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_username_set. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;

  if (arg1) (arg1)->m_username = *arg2;


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_username_get) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  zval **args[1];
  std::string *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_username_get. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->m_username);

  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_password_set) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_password_set. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;

  if (arg1) (arg1)->m_password = *arg2;


  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_password_get) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  zval **args[1];
  std::string *result = 0 ;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_password_get. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->m_password);

  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_listener_set) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  boost::shared_ptr< voltdb::StatusListener > arg2 ;
  boost::shared_ptr< voltdb::StatusListener > *tmp2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_listener_set. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ClientConfigNative_m_listener_set. Expected SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->m_listener = arg2;

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_listener_get) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  zval **args[1];
  boost::shared_ptr< voltdb::StatusListener > result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_listener_get. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->m_listener);
  {
    boost::shared_ptr< voltdb::StatusListener > * resultobj = new boost::shared_ptr< voltdb::StatusListener >((const boost::shared_ptr< voltdb::StatusListener > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t, 1);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_maxOutstandingRequests_set) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  int32_t arg2 ;
  zval **args[2];

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_maxOutstandingRequests_set. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  /*@SWIG:/home/ning/bin/swig/share/swig/2.0.0/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int32_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;

  if (arg1) (arg1)->m_maxOutstandingRequests = arg2;

  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ClientConfigNative_m_maxOutstandingRequests_get) {
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;
  zval **args[1];
  int32_t result;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_voltdb__ClientConfig, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ClientConfigNative_m_maxOutstandingRequests_get. Expected SWIGTYPE_p_voltdb__ClientConfig");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int32_t) ((arg1)->m_maxOutstandingRequests);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ClientConfigNative(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  voltdb::ClientConfig *arg1 = (voltdb::ClientConfig *) 0 ;

  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (voltdb::ClientConfig *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_voltdb__ClientConfig TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "voltdb::ClientConfig resource already free'd");
  delete arg1;
  return;
fail:
  zend_error(SWIG_ErrorCode(),"%s",SWIG_ErrorMsg());
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_signed_char_t) {
  __wrap_delete_Int8Vector(rsrc, SWIGTYPE_p_std__vectorT_signed_char_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_arrayT_char_t) {
  /* No destructor for simple type _p_boost__shared_arrayT_char_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Decimal) {
  __wrap_delete_Decimal(rsrc, SWIGTYPE_p_voltdb__Decimal->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Table) {
  __wrap_delete_Table(rsrc, SWIGTYPE_p_voltdb__Table->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Client) {
  __wrap_delete_ClientNative(rsrc, SWIGTYPE_p_voltdb__Client->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_voltdb__ProcedureCallback_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_voltdb__ProcedureCallback_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_char) {
  /* No destructor for simple type _p_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_size_type) {
  /* No destructor for simple type _p_size_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_voltdb__Column_t) {
  __wrap_delete_Columns(rsrc, SWIGTYPE_p_std__vectorT_voltdb__Column_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bool) {
  /* No destructor for simple type _p_bool */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_uint8_t) {
  /* No destructor for simple type _p_uint8_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_voltdb__StatusListener_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_voltdb__StatusListener_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Procedure) {
  __wrap_delete_Procedure(rsrc, SWIGTYPE_p_voltdb__Procedure->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_voltdb__Parameter_t) {
  __wrap_delete_Parameters(rsrc, SWIGTYPE_p_std__vectorT_voltdb__Parameter_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__StatusListener) {
  __wrap_delete_StatusListenerNative(rsrc, SWIGTYPE_p_voltdb__StatusListener->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ParameterSet) {
  __wrap_delete_ParameterSet(rsrc, SWIGTYPE_p_voltdb__ParameterSet->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Column) {
  __wrap_delete_Column(rsrc, SWIGTYPE_p_voltdb__Column->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_long) {
  /* No destructor for simple type _p_long */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_t) {
  __wrap_delete_DoubleVector(rsrc, SWIGTYPE_p_std__vectorT_double_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__TableIterator) {
  __wrap_delete_TableIterator(rsrc, SWIGTYPE_p_voltdb__TableIterator->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_int_t) {
  __wrap_delete_Int32Vector(rsrc, SWIGTYPE_p_std__vectorT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ByteBuffer) {
  __wrap_delete_ByteBuffer(rsrc, SWIGTYPE_p_voltdb__ByteBuffer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ExpandableByteBuffer) {
  __wrap_delete_ExpandableByteBuffer(rsrc, SWIGTYPE_p_voltdb__ExpandableByteBuffer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__SharedByteBuffer) {
  __wrap_delete_SharedByteBuffer(rsrc, SWIGTYPE_p_voltdb__SharedByteBuffer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ScopedByteBuffer) {
  __wrap_delete_ScopedByteBuffer(rsrc, SWIGTYPE_p_voltdb__ScopedByteBuffer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_ttmath__IntT_4_t) {
  /* No destructor for simple type _p_ttmath__IntT_4_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ClientConfig) {
  __wrap_delete_ClientConfigNative(rsrc, SWIGTYPE_p_voltdb__ClientConfig->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t) {
  /* No destructor for simple type _p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__NoConnectionsException) {
  __wrap_delete_NoConnectionsException(rsrc, SWIGTYPE_p_voltdb__NoConnectionsException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ConnectException) {
  __wrap_delete_ConnectException(rsrc, SWIGTYPE_p_voltdb__ConnectException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__StringToDecimalException) {
  __wrap_delete_StringToDecimalException(rsrc, SWIGTYPE_p_voltdb__StringToDecimalException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__NoMoreRowsException) {
  __wrap_delete_NoMoreRowsException(rsrc, SWIGTYPE_p_voltdb__NoMoreRowsException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ParamMismatchException) {
  __wrap_delete_ParamMismatchException(rsrc, SWIGTYPE_p_voltdb__ParamMismatchException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__UninitializedParamsException) {
  __wrap_delete_UninitializedParamsException(rsrc, SWIGTYPE_p_voltdb__UninitializedParamsException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__NonExpandableBufferException) {
  __wrap_delete_NonExpandableBufferException(rsrc, SWIGTYPE_p_voltdb__NonExpandableBufferException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__IndexOutOfBoundsException) {
  __wrap_delete_IndexOutOfBoundsException(rsrc, SWIGTYPE_p_voltdb__IndexOutOfBoundsException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__OverflowUnderflowException) {
  __wrap_delete_OverflowUnderflowException(rsrc, SWIGTYPE_p_voltdb__OverflowUnderflowException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__InvalidColumnException) {
  __wrap_delete_InvalidColumnException(rsrc, SWIGTYPE_p_voltdb__InvalidColumnException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__NullPointerException) {
  __wrap_delete_NullPointerException(rsrc, SWIGTYPE_p_voltdb__NullPointerException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Exception) {
  __wrap_delete_c_Exception(rsrc, SWIGTYPE_p_voltdb__Exception->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__LibEventException) {
  __wrap_delete_LibEventException(rsrc, SWIGTYPE_p_voltdb__LibEventException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ClusterInstanceMismatchException) {
  __wrap_delete_ClusterInstanceMismatchException(rsrc, SWIGTYPE_p_voltdb__ClusterInstanceMismatchException->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__exception) {
  /* No destructor for simple type _p_std__exception */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_voltdb__Decimal_t) {
  __wrap_delete_DecimalVector(rsrc, SWIGTYPE_p_std__vectorT_voltdb__Decimal_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Parameter) {
  __wrap_delete_Parameter(rsrc, SWIGTYPE_p_voltdb__Parameter->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_signed_char) {
  /* No destructor for simple type _p_signed_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__InvocationResponse) {
  __wrap_delete_InvocationResponse(rsrc, SWIGTYPE_p_voltdb__InvocationResponse->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__ostringstream) {
  /* No destructor for simple type _p_std__ostringstream */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_short) {
  /* No destructor for simple type _p_short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_long_t) {
  __wrap_delete_Int64Vector(rsrc, SWIGTYPE_p_std__vectorT_long_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ProcedureCallback) {
  __wrap_delete_ProcedureCallbackNative(rsrc, SWIGTYPE_p_voltdb__ProcedureCallback->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__Row) {
  __wrap_delete_Row(rsrc, SWIGTYPE_p_voltdb__Row->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t) {
  /* No destructor for simple type _p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_short_t) {
  __wrap_delete_Int16Vector(rsrc, SWIGTYPE_p_std__vectorT_short_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_voltdb__ConnectionPool) {
  __wrap_delete_ConnectionPool(rsrc, SWIGTYPE_p_voltdb__ConnectionPool->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_value_type) {
  /* No destructor for simple type _p_value_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_voltdb__Table_t) {
  __wrap_delete_Tables(rsrc, SWIGTYPE_p_std__vectorT_voltdb__Table_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__string_t) {
  __wrap_delete_StringVector(rsrc, SWIGTYPE_p_std__vectorT_std__string_t->name TSRMLS_CC);
}
/* end wrapper section */
/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry voltdb_functions[] = {
 SWIG_ZEND_NAMED_FE(new_parameters,_wrap_new_Parameters,NULL)
 SWIG_ZEND_NAMED_FE(parameters_size,_wrap_Parameters_size,NULL)
 SWIG_ZEND_NAMED_FE(parameters_capacity,_wrap_Parameters_capacity,NULL)
 SWIG_ZEND_NAMED_FE(parameters_reserve,_wrap_Parameters_reserve,NULL)
 SWIG_ZEND_NAMED_FE(parameters_clear,_wrap_Parameters_clear,NULL)
 SWIG_ZEND_NAMED_FE(parameters_push,_wrap_Parameters_push,NULL)
 SWIG_ZEND_NAMED_FE(parameters_is_empty,_wrap_Parameters_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(parameters_pop,_wrap_Parameters_pop,NULL)
 SWIG_ZEND_NAMED_FE(parameters_get,_wrap_Parameters_get,NULL)
 SWIG_ZEND_NAMED_FE(parameters_set,_wrap_Parameters_set,NULL)
 SWIG_ZEND_NAMED_FE(new_tables,_wrap_new_Tables,NULL)
 SWIG_ZEND_NAMED_FE(tables_size,_wrap_Tables_size,NULL)
 SWIG_ZEND_NAMED_FE(tables_capacity,_wrap_Tables_capacity,NULL)
 SWIG_ZEND_NAMED_FE(tables_reserve,_wrap_Tables_reserve,NULL)
 SWIG_ZEND_NAMED_FE(tables_clear,_wrap_Tables_clear,NULL)
 SWIG_ZEND_NAMED_FE(tables_push,_wrap_Tables_push,NULL)
 SWIG_ZEND_NAMED_FE(tables_is_empty,_wrap_Tables_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(tables_pop,_wrap_Tables_pop,NULL)
 SWIG_ZEND_NAMED_FE(tables_get,_wrap_Tables_get,NULL)
 SWIG_ZEND_NAMED_FE(tables_set,_wrap_Tables_set,NULL)
 SWIG_ZEND_NAMED_FE(new_columns,_wrap_new_Columns,NULL)
 SWIG_ZEND_NAMED_FE(columns_size,_wrap_Columns_size,NULL)
 SWIG_ZEND_NAMED_FE(columns_capacity,_wrap_Columns_capacity,NULL)
 SWIG_ZEND_NAMED_FE(columns_reserve,_wrap_Columns_reserve,NULL)
 SWIG_ZEND_NAMED_FE(columns_clear,_wrap_Columns_clear,NULL)
 SWIG_ZEND_NAMED_FE(columns_push,_wrap_Columns_push,NULL)
 SWIG_ZEND_NAMED_FE(columns_is_empty,_wrap_Columns_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(columns_pop,_wrap_Columns_pop,NULL)
 SWIG_ZEND_NAMED_FE(columns_get,_wrap_Columns_get,NULL)
 SWIG_ZEND_NAMED_FE(columns_set,_wrap_Columns_set,NULL)
 SWIG_ZEND_NAMED_FE(new_int8vector,_wrap_new_Int8Vector,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_size,_wrap_Int8Vector_size,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_capacity,_wrap_Int8Vector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_reserve,_wrap_Int8Vector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_clear,_wrap_Int8Vector_clear,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_push,_wrap_Int8Vector_push,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_is_empty,_wrap_Int8Vector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_pop,_wrap_Int8Vector_pop,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_get,_wrap_Int8Vector_get,NULL)
 SWIG_ZEND_NAMED_FE(int8vector_set,_wrap_Int8Vector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_int16vector,_wrap_new_Int16Vector,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_size,_wrap_Int16Vector_size,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_capacity,_wrap_Int16Vector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_reserve,_wrap_Int16Vector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_clear,_wrap_Int16Vector_clear,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_push,_wrap_Int16Vector_push,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_is_empty,_wrap_Int16Vector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_pop,_wrap_Int16Vector_pop,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_get,_wrap_Int16Vector_get,NULL)
 SWIG_ZEND_NAMED_FE(int16vector_set,_wrap_Int16Vector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_int32vector,_wrap_new_Int32Vector,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_size,_wrap_Int32Vector_size,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_capacity,_wrap_Int32Vector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_reserve,_wrap_Int32Vector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_clear,_wrap_Int32Vector_clear,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_push,_wrap_Int32Vector_push,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_is_empty,_wrap_Int32Vector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_pop,_wrap_Int32Vector_pop,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_get,_wrap_Int32Vector_get,NULL)
 SWIG_ZEND_NAMED_FE(int32vector_set,_wrap_Int32Vector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_int64vector,_wrap_new_Int64Vector,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_size,_wrap_Int64Vector_size,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_capacity,_wrap_Int64Vector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_reserve,_wrap_Int64Vector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_clear,_wrap_Int64Vector_clear,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_push,_wrap_Int64Vector_push,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_is_empty,_wrap_Int64Vector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_pop,_wrap_Int64Vector_pop,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_get,_wrap_Int64Vector_get,NULL)
 SWIG_ZEND_NAMED_FE(int64vector_set,_wrap_Int64Vector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_doublevector,_wrap_new_DoubleVector,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_size,_wrap_DoubleVector_size,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_capacity,_wrap_DoubleVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_reserve,_wrap_DoubleVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_clear,_wrap_DoubleVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_push,_wrap_DoubleVector_push,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_is_empty,_wrap_DoubleVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_pop,_wrap_DoubleVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_get,_wrap_DoubleVector_get,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_set,_wrap_DoubleVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_stringvector,_wrap_new_StringVector,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_size,_wrap_StringVector_size,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_capacity,_wrap_StringVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_reserve,_wrap_StringVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_clear,_wrap_StringVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_push,_wrap_StringVector_push,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_is_empty,_wrap_StringVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_pop,_wrap_StringVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_get,_wrap_StringVector_get,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_set,_wrap_StringVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_decimalvector,_wrap_new_DecimalVector,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_size,_wrap_DecimalVector_size,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_capacity,_wrap_DecimalVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_reserve,_wrap_DecimalVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_clear,_wrap_DecimalVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_push,_wrap_DecimalVector_push,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_is_empty,_wrap_DecimalVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_pop,_wrap_DecimalVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_get,_wrap_DecimalVector_get,NULL)
 SWIG_ZEND_NAMED_FE(decimalvector_set,_wrap_DecimalVector_set,NULL)
 SWIG_ZEND_NAMED_FE(c_exception_what,_wrap_c_Exception_what,NULL)
 SWIG_ZEND_NAMED_FE(new_c_exception,_wrap_new_c_Exception,NULL)
 SWIG_ZEND_NAMED_FE(new_nullpointerexception,_wrap_new_NullPointerException,NULL)
 SWIG_ZEND_NAMED_FE(nullpointerexception_what,_wrap_NullPointerException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_invalidcolumnexception,_wrap_new_InvalidColumnException,NULL)
 SWIG_ZEND_NAMED_FE(invalidcolumnexception_what,_wrap_InvalidColumnException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_overflowunderflowexception,_wrap_new_OverflowUnderflowException,NULL)
 SWIG_ZEND_NAMED_FE(overflowunderflowexception_what,_wrap_OverflowUnderflowException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_indexoutofboundsexception,_wrap_new_IndexOutOfBoundsException,NULL)
 SWIG_ZEND_NAMED_FE(indexoutofboundsexception_what,_wrap_IndexOutOfBoundsException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_nonexpandablebufferexception,_wrap_new_NonExpandableBufferException,NULL)
 SWIG_ZEND_NAMED_FE(nonexpandablebufferexception_what,_wrap_NonExpandableBufferException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_uninitializedparamsexception,_wrap_new_UninitializedParamsException,NULL)
 SWIG_ZEND_NAMED_FE(uninitializedparamsexception_what,_wrap_UninitializedParamsException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_parammismatchexception,_wrap_new_ParamMismatchException,NULL)
 SWIG_ZEND_NAMED_FE(parammismatchexception_what,_wrap_ParamMismatchException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_nomorerowsexception,_wrap_new_NoMoreRowsException,NULL)
 SWIG_ZEND_NAMED_FE(nomorerowsexception_what,_wrap_NoMoreRowsException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_stringtodecimalexception,_wrap_new_StringToDecimalException,NULL)
 SWIG_ZEND_NAMED_FE(stringtodecimalexception_what,_wrap_StringToDecimalException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_connectexception,_wrap_new_ConnectException,NULL)
 SWIG_ZEND_NAMED_FE(connectexception_what,_wrap_ConnectException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_noconnectionsexception,_wrap_new_NoConnectionsException,NULL)
 SWIG_ZEND_NAMED_FE(noconnectionsexception_what,_wrap_NoConnectionsException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_libeventexception,_wrap_new_LibEventException,NULL)
 SWIG_ZEND_NAMED_FE(libeventexception_what,_wrap_LibEventException_what,NULL)
 SWIG_ZEND_NAMED_FE(new_clusterinstancemismatchexception,_wrap_new_ClusterInstanceMismatchException,NULL)
 SWIG_ZEND_NAMED_FE(clusterinstancemismatchexception_what,_wrap_ClusterInstanceMismatchException_what,NULL)
 SWIG_ZEND_NAMED_FE(wiretypetostring,_wrap_wireTypeToString,NULL)
 SWIG_ZEND_NAMED_FE(new_parameter,_wrap_new_Parameter,NULL)
 SWIG_ZEND_NAMED_FE(parameter_m_type_set,_wrap_Parameter_m_type_set,NULL)
 SWIG_ZEND_NAMED_FE(parameter_m_type_get,_wrap_Parameter_m_type_get,NULL)
 SWIG_ZEND_NAMED_FE(parameter_m_array_set,_wrap_Parameter_m_array_set,NULL)
 SWIG_ZEND_NAMED_FE(parameter_m_array_get,_wrap_Parameter_m_array_get,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_flip,_wrap_ByteBuffer_flip,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_clear,_wrap_ByteBuffer_clear,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_get,_wrap_ByteBuffer_get,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_put,_wrap_ByteBuffer_put,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getint8,_wrap_ByteBuffer_getInt8,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putint8,_wrap_ByteBuffer_putInt8,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getint16,_wrap_ByteBuffer_getInt16,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putint16,_wrap_ByteBuffer_putInt16,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getint32,_wrap_ByteBuffer_getInt32,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putint32,_wrap_ByteBuffer_putInt32,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getint64,_wrap_ByteBuffer_getInt64,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putint64,_wrap_ByteBuffer_putInt64,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getdouble,_wrap_ByteBuffer_getDouble,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putdouble,_wrap_ByteBuffer_putDouble,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getstring,_wrap_ByteBuffer_getString,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_getbytes,_wrap_ByteBuffer_getBytes,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putbytes,_wrap_ByteBuffer_putBytes,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_putstring,_wrap_ByteBuffer_putString,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_position,_wrap_ByteBuffer_position,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_remaining,_wrap_ByteBuffer_remaining,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_hasremaining,_wrap_ByteBuffer_hasRemaining,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_limit,_wrap_ByteBuffer_limit,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_bytes,_wrap_ByteBuffer_bytes,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_slice,_wrap_ByteBuffer_slice,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_isexpandable,_wrap_ByteBuffer_isExpandable,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_ensureremaining,_wrap_ByteBuffer_ensureRemaining,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_ensureremainingexact,_wrap_ByteBuffer_ensureRemainingExact,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_ensurecapacity,_wrap_ByteBuffer_ensureCapacity,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_ensurecapacityexact,_wrap_ByteBuffer_ensureCapacityExact,NULL)
 SWIG_ZEND_NAMED_FE(bytebuffer_capacity,_wrap_ByteBuffer_capacity,NULL)
 SWIG_ZEND_NAMED_FE(new_bytebuffer,_wrap_new_ByteBuffer,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_ensureremaining,_wrap_ExpandableByteBuffer_ensureRemaining,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_ensureremainingexact,_wrap_ExpandableByteBuffer_ensureRemainingExact,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_ensurecapacity,_wrap_ExpandableByteBuffer_ensureCapacity,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_ensurecapacityexact,_wrap_ExpandableByteBuffer_ensureCapacityExact,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_isexpandable,_wrap_ExpandableByteBuffer_isExpandable,NULL)
 SWIG_ZEND_NAMED_FE(new_expandablebytebuffer,_wrap_new_ExpandableByteBuffer,NULL)
 SWIG_ZEND_NAMED_FE(expandablebytebuffer_resetref,_wrap_ExpandableByteBuffer_resetRef,NULL)
 SWIG_ZEND_NAMED_FE(sharedbytebuffer_slice,_wrap_SharedByteBuffer_slice,NULL)
 SWIG_ZEND_NAMED_FE(new_sharedbytebuffer,_wrap_new_SharedByteBuffer,NULL)
 SWIG_ZEND_NAMED_FE(sharedbytebuffer_resetref,_wrap_SharedByteBuffer_resetRef,NULL)
 SWIG_ZEND_NAMED_FE(new_scopedbytebuffer,_wrap_new_ScopedByteBuffer,NULL)
 SWIG_ZEND_NAMED_FE(scopedbytebuffer_resetref,_wrap_ScopedByteBuffer_resetRef,NULL)
 SWIG_ZEND_NAMED_FE(new_decimal,_wrap_new_Decimal,NULL)
 SWIG_ZEND_NAMED_FE(decimal_getdecimal,_wrap_Decimal_getDecimal,NULL)
 SWIG_ZEND_NAMED_FE(decimal_tostring,_wrap_Decimal_toString,NULL)
 SWIG_ZEND_NAMED_FE(decimal_isnull,_wrap_Decimal_isNull,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addbytes,_wrap_ParameterSet_addBytes,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_adddecimal,_wrap_ParameterSet_addDecimal,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addtimestamp,_wrap_ParameterSet_addTimestamp,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addint64,_wrap_ParameterSet_addInt64,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addint32,_wrap_ParameterSet_addInt32,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addint16,_wrap_ParameterSet_addInt16,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addint8,_wrap_ParameterSet_addInt8,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_adddouble,_wrap_ParameterSet_addDouble,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addnull,_wrap_ParameterSet_addNull,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_addstring,_wrap_ParameterSet_addString,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_reset,_wrap_ParameterSet_reset,NULL)
 SWIG_ZEND_NAMED_FE(parameterset_getserializedsize,_wrap_ParameterSet_getSerializedSize,NULL)
 SWIG_ZEND_NAMED_FE(new_procedure,_wrap_new_Procedure,NULL)
 SWIG_ZEND_NAMED_FE(procedure_params,_wrap_Procedure_params,NULL)
 SWIG_ZEND_NAMED_FE(procedure_getserializedsize,_wrap_Procedure_getSerializedSize,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_clientdata,_wrap_InvocationResponse_clientData,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_statuscode,_wrap_InvocationResponse_statusCode,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_success,_wrap_InvocationResponse_success,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_failure,_wrap_InvocationResponse_failure,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_statusstring,_wrap_InvocationResponse_statusString,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_appstatuscode,_wrap_InvocationResponse_appStatusCode,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_appstatusstring,_wrap_InvocationResponse_appStatusString,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_clusterroundtriptime,_wrap_InvocationResponse_clusterRoundTripTime,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_results,_wrap_InvocationResponse_results,NULL)
 SWIG_ZEND_NAMED_FE(invocationresponse_tostring,_wrap_InvocationResponse_toString,NULL)
 SWIG_ZEND_NAMED_FE(procedurecallbacknative_callback,_wrap_ProcedureCallbackNative_callback,NULL)
 SWIG_ZEND_NAMED_FE(new_procedurecallbacknative,_wrap_new_ProcedureCallbackNative,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_createconnection,_wrap_ClientNative_createConnection,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_invoke,_wrap_ClientNative_invoke,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_runonce,_wrap_ClientNative_runOnce,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_run,_wrap_ClientNative_run,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_drain,_wrap_ClientNative_drain,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_interrupt,_wrap_ClientNative_interrupt,NULL)
 SWIG_ZEND_NAMED_FE(clientnative_create,_wrap_ClientNative_create,NULL)
 SWIG_ZEND_NAMED_FE(row_getvarbinary,_wrap_Row_getVarbinary,NULL)
 SWIG_ZEND_NAMED_FE(row_getdecimal,_wrap_Row_getDecimal,NULL)
 SWIG_ZEND_NAMED_FE(row_gettimestamp,_wrap_Row_getTimestamp,NULL)
 SWIG_ZEND_NAMED_FE(row_getint64,_wrap_Row_getInt64,NULL)
 SWIG_ZEND_NAMED_FE(row_getint32,_wrap_Row_getInt32,NULL)
 SWIG_ZEND_NAMED_FE(row_getint16,_wrap_Row_getInt16,NULL)
 SWIG_ZEND_NAMED_FE(row_getint8,_wrap_Row_getInt8,NULL)
 SWIG_ZEND_NAMED_FE(row_getdouble,_wrap_Row_getDouble,NULL)
 SWIG_ZEND_NAMED_FE(row_getstring,_wrap_Row_getString,NULL)
 SWIG_ZEND_NAMED_FE(row_isnull,_wrap_Row_isNull,NULL)
 SWIG_ZEND_NAMED_FE(row_wasnull,_wrap_Row_wasNull,NULL)
 SWIG_ZEND_NAMED_FE(row_tostring,_wrap_Row_toString,NULL)
 SWIG_ZEND_NAMED_FE(row_columncount,_wrap_Row_columnCount,NULL)
 SWIG_ZEND_NAMED_FE(row_columns,_wrap_Row_columns,NULL)
 SWIG_ZEND_NAMED_FE(tableiterator_hasnext,_wrap_TableIterator_hasNext,NULL)
 SWIG_ZEND_NAMED_FE(tableiterator_next,_wrap_TableIterator_next,NULL)
 SWIG_ZEND_NAMED_FE(new_table,_wrap_new_Table,NULL)
 SWIG_ZEND_NAMED_FE(table_iterator,_wrap_Table_iterator,NULL)
 SWIG_ZEND_NAMED_FE(table_getstatuscode,_wrap_Table_getStatusCode,NULL)
 SWIG_ZEND_NAMED_FE(table_rowcount,_wrap_Table_rowCount,NULL)
 SWIG_ZEND_NAMED_FE(table_columns,_wrap_Table_columns,NULL)
 SWIG_ZEND_NAMED_FE(table_columncount,_wrap_Table_columnCount,NULL)
 SWIG_ZEND_NAMED_FE(table_tostring,_wrap_Table_toString,NULL)
 SWIG_ZEND_NAMED_FE(statuslistenernative_uncaughtexception,_wrap_StatusListenerNative_uncaughtException,NULL)
 SWIG_ZEND_NAMED_FE(statuslistenernative_connectionlost,_wrap_StatusListenerNative_connectionLost,NULL)
 SWIG_ZEND_NAMED_FE(statuslistenernative_backpressure,_wrap_StatusListenerNative_backpressure,NULL)
 SWIG_ZEND_NAMED_FE(new_statuslistenernative,_wrap_new_StatusListenerNative,NULL)
 SWIG_ZEND_NAMED_FE(new_column,_wrap_new_Column,NULL)
 SWIG_ZEND_NAMED_FE(column_m_name_set,_wrap_Column_m_name_set,NULL)
 SWIG_ZEND_NAMED_FE(column_m_name_get,_wrap_Column_m_name_get,NULL)
 SWIG_ZEND_NAMED_FE(column_m_type_set,_wrap_Column_m_type_set,NULL)
 SWIG_ZEND_NAMED_FE(column_m_type_get,_wrap_Column_m_type_get,NULL)
 SWIG_ZEND_NAMED_FE(column_name,_wrap_Column_name,NULL)
 SWIG_ZEND_NAMED_FE(column_type,_wrap_Column_type,NULL)
 SWIG_ZEND_NAMED_FE(cleanuponscriptend,_wrap_cleanupOnScriptEnd,NULL)
 SWIG_ZEND_NAMED_FE(new_connectionpool,_wrap_new_ConnectionPool,NULL)
 SWIG_ZEND_NAMED_FE(connectionpool_acquireclient,_wrap_ConnectionPool_acquireClient,NULL)
 SWIG_ZEND_NAMED_FE(connectionpool_onscriptend,_wrap_ConnectionPool_onScriptEnd,NULL)
 SWIG_ZEND_NAMED_FE(connectionpool_pool,_wrap_ConnectionPool_pool,NULL)
 SWIG_ZEND_NAMED_FE(onload,_wrap_onLoad,NULL)
 SWIG_ZEND_NAMED_FE(onunload,_wrap_onUnload,NULL)
 SWIG_ZEND_NAMED_FE(onscriptend,_wrap_onScriptEnd,NULL)
 SWIG_ZEND_NAMED_FE(new_clientconfignative,_wrap_new_ClientConfigNative,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_username_set,_wrap_ClientConfigNative_m_username_set,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_username_get,_wrap_ClientConfigNative_m_username_get,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_password_set,_wrap_ClientConfigNative_m_password_set,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_password_get,_wrap_ClientConfigNative_m_password_get,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_listener_set,_wrap_ClientConfigNative_m_listener_set,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_listener_get,_wrap_ClientConfigNative_m_listener_get,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_maxoutstandingrequests_set,_wrap_ClientConfigNative_m_maxOutstandingRequests_set,NULL)
 SWIG_ZEND_NAMED_FE(clientconfignative_m_maxoutstandingrequests_get,_wrap_ClientConfigNative_m_maxOutstandingRequests_get,NULL)
 SWIG_ZEND_NAMED_FE(swig_voltdb_alter_newobject,_wrap_swig_voltdb_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_voltdb_get_newobject,_wrap_swig_voltdb_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry voltdb_module_entry = {
#if ZEND_MODULE_API_NO > 20010900
    STANDARD_MODULE_HEADER,
#endif
    (char*)"voltdb",
    voltdb_functions,
    PHP_MINIT(voltdb),
    PHP_MSHUTDOWN(voltdb),
    PHP_RINIT(voltdb),
    PHP_RSHUTDOWN(voltdb),
    PHP_MINFO(voltdb),
#if ZEND_MODULE_API_NO > 20010900
    NO_VERSION_YET,
#endif
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &voltdb_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &voltdb_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(voltdb)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);
    le_member_ptr = zend_register_list_destructors_ex(member_ptr_dtor, NULL, SWIG_MEMBER_PTR, module_number);


    voltdb::onLoad();

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(voltdb, voltdb_init_globals, voltdb_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_std__vectorT_signed_char_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_signed_char_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_signed_char_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_signed_char_t,&le_swig__p_std__vectorT_signed_char_t);
le_swig__p_boost__shared_arrayT_char_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_arrayT_char_t,NULL,(char *)(SWIGTYPE_p_boost__shared_arrayT_char_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_arrayT_char_t,&le_swig__p_boost__shared_arrayT_char_t);
le_swig__p_voltdb__Decimal=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Decimal,NULL,(char *)(SWIGTYPE_p_voltdb__Decimal->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Decimal,&le_swig__p_voltdb__Decimal);
le_swig__p_voltdb__Table=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Table,NULL,(char *)(SWIGTYPE_p_voltdb__Table->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Table,&le_swig__p_voltdb__Table);
le_swig__p_voltdb__Client=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Client,NULL,(char *)(SWIGTYPE_p_voltdb__Client->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Client,&le_swig__p_voltdb__Client);
le_swig__p_boost__shared_ptrT_voltdb__ProcedureCallback_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_voltdb__ProcedureCallback_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_voltdb__ProcedureCallback_t,&le_swig__p_boost__shared_ptrT_voltdb__ProcedureCallback_t);
le_swig__p_char=zend_register_list_destructors_ex(_wrap_destroy_p_char,NULL,(char *)(SWIGTYPE_p_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_char,&le_swig__p_char);
le_swig__p_size_type=zend_register_list_destructors_ex(_wrap_destroy_p_size_type,NULL,(char *)(SWIGTYPE_p_size_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_size_type,&le_swig__p_size_type);
le_swig__p_std__vectorT_voltdb__Column_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_voltdb__Column_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_voltdb__Column_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_voltdb__Column_t,&le_swig__p_std__vectorT_voltdb__Column_t);
le_swig__p_bool=zend_register_list_destructors_ex(_wrap_destroy_p_bool,NULL,(char *)(SWIGTYPE_p_bool->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bool,&le_swig__p_bool);
le_swig__p_uint8_t=zend_register_list_destructors_ex(_wrap_destroy_p_uint8_t,NULL,(char *)(SWIGTYPE_p_uint8_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_uint8_t,&le_swig__p_uint8_t);
le_swig__p_boost__shared_ptrT_voltdb__StatusListener_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_voltdb__StatusListener_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_voltdb__StatusListener_t,&le_swig__p_boost__shared_ptrT_voltdb__StatusListener_t);
le_swig__p_voltdb__Procedure=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Procedure,NULL,(char *)(SWIGTYPE_p_voltdb__Procedure->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Procedure,&le_swig__p_voltdb__Procedure);
le_swig__p_std__vectorT_voltdb__Parameter_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_voltdb__Parameter_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_voltdb__Parameter_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_voltdb__Parameter_t,&le_swig__p_std__vectorT_voltdb__Parameter_t);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_voltdb__StatusListener=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__StatusListener,NULL,(char *)(SWIGTYPE_p_voltdb__StatusListener->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__StatusListener,&le_swig__p_voltdb__StatusListener);
le_swig__p_voltdb__ParameterSet=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ParameterSet,NULL,(char *)(SWIGTYPE_p_voltdb__ParameterSet->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ParameterSet,&le_swig__p_voltdb__ParameterSet);
le_swig__p_voltdb__Column=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Column,NULL,(char *)(SWIGTYPE_p_voltdb__Column->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Column,&le_swig__p_voltdb__Column);
le_swig__p_long=zend_register_list_destructors_ex(_wrap_destroy_p_long,NULL,(char *)(SWIGTYPE_p_long->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_long,&le_swig__p_long);
le_swig__p_std__vectorT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t,&le_swig__p_std__vectorT_double_t);
le_swig__p_voltdb__TableIterator=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__TableIterator,NULL,(char *)(SWIGTYPE_p_voltdb__TableIterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__TableIterator,&le_swig__p_voltdb__TableIterator);
le_swig__p_std__vectorT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_int_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_t,&le_swig__p_std__vectorT_int_t);
le_swig__p_voltdb__ByteBuffer=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ByteBuffer,NULL,(char *)(SWIGTYPE_p_voltdb__ByteBuffer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ByteBuffer,&le_swig__p_voltdb__ByteBuffer);
le_swig__p_voltdb__ExpandableByteBuffer=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ExpandableByteBuffer,NULL,(char *)(SWIGTYPE_p_voltdb__ExpandableByteBuffer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ExpandableByteBuffer,&le_swig__p_voltdb__ExpandableByteBuffer);
le_swig__p_voltdb__SharedByteBuffer=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__SharedByteBuffer,NULL,(char *)(SWIGTYPE_p_voltdb__SharedByteBuffer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__SharedByteBuffer,&le_swig__p_voltdb__SharedByteBuffer);
le_swig__p_voltdb__ScopedByteBuffer=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ScopedByteBuffer,NULL,(char *)(SWIGTYPE_p_voltdb__ScopedByteBuffer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ScopedByteBuffer,&le_swig__p_voltdb__ScopedByteBuffer);
le_swig__p_ttmath__IntT_4_t=zend_register_list_destructors_ex(_wrap_destroy_p_ttmath__IntT_4_t,NULL,(char *)(SWIGTYPE_p_ttmath__IntT_4_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_ttmath__IntT_4_t,&le_swig__p_ttmath__IntT_4_t);
le_swig__p_voltdb__ClientConfig=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ClientConfig,NULL,(char *)(SWIGTYPE_p_voltdb__ClientConfig->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ClientConfig,&le_swig__p_voltdb__ClientConfig);
le_swig__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t,NULL,(char *)(SWIGTYPE_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t,&le_swig__p_std__mapT_std__string_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t_t);
le_swig__p_voltdb__NoConnectionsException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__NoConnectionsException,NULL,(char *)(SWIGTYPE_p_voltdb__NoConnectionsException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__NoConnectionsException,&le_swig__p_voltdb__NoConnectionsException);
le_swig__p_voltdb__ConnectException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ConnectException,NULL,(char *)(SWIGTYPE_p_voltdb__ConnectException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ConnectException,&le_swig__p_voltdb__ConnectException);
le_swig__p_voltdb__StringToDecimalException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__StringToDecimalException,NULL,(char *)(SWIGTYPE_p_voltdb__StringToDecimalException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__StringToDecimalException,&le_swig__p_voltdb__StringToDecimalException);
le_swig__p_voltdb__NoMoreRowsException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__NoMoreRowsException,NULL,(char *)(SWIGTYPE_p_voltdb__NoMoreRowsException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__NoMoreRowsException,&le_swig__p_voltdb__NoMoreRowsException);
le_swig__p_voltdb__ParamMismatchException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ParamMismatchException,NULL,(char *)(SWIGTYPE_p_voltdb__ParamMismatchException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ParamMismatchException,&le_swig__p_voltdb__ParamMismatchException);
le_swig__p_voltdb__UninitializedParamsException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__UninitializedParamsException,NULL,(char *)(SWIGTYPE_p_voltdb__UninitializedParamsException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__UninitializedParamsException,&le_swig__p_voltdb__UninitializedParamsException);
le_swig__p_voltdb__NonExpandableBufferException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__NonExpandableBufferException,NULL,(char *)(SWIGTYPE_p_voltdb__NonExpandableBufferException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__NonExpandableBufferException,&le_swig__p_voltdb__NonExpandableBufferException);
le_swig__p_voltdb__IndexOutOfBoundsException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__IndexOutOfBoundsException,NULL,(char *)(SWIGTYPE_p_voltdb__IndexOutOfBoundsException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__IndexOutOfBoundsException,&le_swig__p_voltdb__IndexOutOfBoundsException);
le_swig__p_voltdb__OverflowUnderflowException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__OverflowUnderflowException,NULL,(char *)(SWIGTYPE_p_voltdb__OverflowUnderflowException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__OverflowUnderflowException,&le_swig__p_voltdb__OverflowUnderflowException);
le_swig__p_voltdb__InvalidColumnException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__InvalidColumnException,NULL,(char *)(SWIGTYPE_p_voltdb__InvalidColumnException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__InvalidColumnException,&le_swig__p_voltdb__InvalidColumnException);
le_swig__p_voltdb__NullPointerException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__NullPointerException,NULL,(char *)(SWIGTYPE_p_voltdb__NullPointerException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__NullPointerException,&le_swig__p_voltdb__NullPointerException);
le_swig__p_voltdb__Exception=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Exception,NULL,(char *)(SWIGTYPE_p_voltdb__Exception->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Exception,&le_swig__p_voltdb__Exception);
le_swig__p_voltdb__LibEventException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__LibEventException,NULL,(char *)(SWIGTYPE_p_voltdb__LibEventException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__LibEventException,&le_swig__p_voltdb__LibEventException);
le_swig__p_voltdb__ClusterInstanceMismatchException=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ClusterInstanceMismatchException,NULL,(char *)(SWIGTYPE_p_voltdb__ClusterInstanceMismatchException->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ClusterInstanceMismatchException,&le_swig__p_voltdb__ClusterInstanceMismatchException);
le_swig__p_std__exception=zend_register_list_destructors_ex(_wrap_destroy_p_std__exception,NULL,(char *)(SWIGTYPE_p_std__exception->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__exception,&le_swig__p_std__exception);
le_swig__p_std__vectorT_voltdb__Decimal_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_voltdb__Decimal_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_voltdb__Decimal_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_voltdb__Decimal_t,&le_swig__p_std__vectorT_voltdb__Decimal_t);
le_swig__p_voltdb__Parameter=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Parameter,NULL,(char *)(SWIGTYPE_p_voltdb__Parameter->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Parameter,&le_swig__p_voltdb__Parameter);
le_swig__p_signed_char=zend_register_list_destructors_ex(_wrap_destroy_p_signed_char,NULL,(char *)(SWIGTYPE_p_signed_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_signed_char,&le_swig__p_signed_char);
le_swig__p_voltdb__InvocationResponse=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__InvocationResponse,NULL,(char *)(SWIGTYPE_p_voltdb__InvocationResponse->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__InvocationResponse,&le_swig__p_voltdb__InvocationResponse);
le_swig__p_std__ostringstream=zend_register_list_destructors_ex(_wrap_destroy_p_std__ostringstream,NULL,(char *)(SWIGTYPE_p_std__ostringstream->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__ostringstream,&le_swig__p_std__ostringstream);
le_swig__p_short=zend_register_list_destructors_ex(_wrap_destroy_p_short,NULL,(char *)(SWIGTYPE_p_short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_short,&le_swig__p_short);
le_swig__p_std__vectorT_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_long_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_long_t,&le_swig__p_std__vectorT_long_t);
le_swig__p_voltdb__ProcedureCallback=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ProcedureCallback,NULL,(char *)(SWIGTYPE_p_voltdb__ProcedureCallback->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ProcedureCallback,&le_swig__p_voltdb__ProcedureCallback);
le_swig__p_voltdb__Row=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__Row,NULL,(char *)(SWIGTYPE_p_voltdb__Row->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__Row,&le_swig__p_voltdb__Row);
le_swig__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t,&le_swig__p_std__vectorT_boost__shared_ptrT_voltdb__ClientStuff_t_t);
le_swig__p_std__vectorT_short_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_short_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_short_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_short_t,&le_swig__p_std__vectorT_short_t);
le_swig__p_voltdb__ConnectionPool=zend_register_list_destructors_ex(_wrap_destroy_p_voltdb__ConnectionPool,NULL,(char *)(SWIGTYPE_p_voltdb__ConnectionPool->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_voltdb__ConnectionPool,&le_swig__p_voltdb__ConnectionPool);
le_swig__p_value_type=zend_register_list_destructors_ex(_wrap_destroy_p_value_type,NULL,(char *)(SWIGTYPE_p_value_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_value_type,&le_swig__p_value_type);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
le_swig__p_std__vectorT_voltdb__Table_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_voltdb__Table_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_voltdb__Table_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_voltdb__Table_t,&le_swig__p_std__vectorT_voltdb__Table_t);
le_swig__p_std__vectorT_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__string_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__string_t,&le_swig__p_std__vectorT_std__string_t);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
SWIG_LONG_CONSTANT(WIRE_TYPE_INVALID, voltdb::WIRE_TYPE_INVALID);
SWIG_LONG_CONSTANT(WIRE_TYPE_ARRAY, voltdb::WIRE_TYPE_ARRAY);
SWIG_LONG_CONSTANT(WIRE_TYPE_NULL, voltdb::WIRE_TYPE_NULL);
SWIG_LONG_CONSTANT(WIRE_TYPE_TINYINT, voltdb::WIRE_TYPE_TINYINT);
SWIG_LONG_CONSTANT(WIRE_TYPE_SMALLINT, voltdb::WIRE_TYPE_SMALLINT);
SWIG_LONG_CONSTANT(WIRE_TYPE_INTEGER, voltdb::WIRE_TYPE_INTEGER);
SWIG_LONG_CONSTANT(WIRE_TYPE_BIGINT, voltdb::WIRE_TYPE_BIGINT);
SWIG_LONG_CONSTANT(WIRE_TYPE_FLOAT, voltdb::WIRE_TYPE_FLOAT);
SWIG_LONG_CONSTANT(WIRE_TYPE_STRING, voltdb::WIRE_TYPE_STRING);
SWIG_LONG_CONSTANT(WIRE_TYPE_TIMESTAMP, voltdb::WIRE_TYPE_TIMESTAMP);
SWIG_LONG_CONSTANT(WIRE_TYPE_DECIMAL, voltdb::WIRE_TYPE_DECIMAL);
SWIG_LONG_CONSTANT(WIRE_TYPE_VARBINARY, voltdb::WIRE_TYPE_VARBINARY);
SWIG_LONG_CONSTANT(STATUS_CODE_SUCCESS, voltdb::STATUS_CODE_SUCCESS);
SWIG_LONG_CONSTANT(STATUS_CODE_USER_ABORT, voltdb::STATUS_CODE_USER_ABORT);
SWIG_LONG_CONSTANT(STATUS_CODE_GRACEFUL_FAILURE, voltdb::STATUS_CODE_GRACEFUL_FAILURE);
SWIG_LONG_CONSTANT(STATUS_CODE_UNEXPECTED_FAILURE, voltdb::STATUS_CODE_UNEXPECTED_FAILURE);
SWIG_LONG_CONSTANT(STATUS_CODE_CONNECTION_LOST, voltdb::STATUS_CODE_CONNECTION_LOST);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(voltdb)
{
/* rinit section */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(voltdb)
{
/* shutdown section */

    voltdb::onUnload();

#ifdef ZTS
    ts_free_id(voltdb_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(voltdb)
{
/* rshutdown section */

    voltdb::onScriptEnd();


    return SUCCESS;
}

PHP_MINFO_FUNCTION(voltdb)
{
}
/* end init section */
