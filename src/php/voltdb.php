<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

namespace volt;

// Try to load our extension if it's not already loaded.
if (!extension_loaded('voltdb')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_voltdb.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('voltdb.so')) return;
    } else {
      if (!dl('voltdb.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* Code for each type of exception */
const ExceptionCode = 0;
const NullPointerExceptionCode = 1;
const InvalidColumnExceptionCode = 2;
const OverflowUnderflowExceptionCode = 3;
const IndexOutOfBoundsExceptionCode = 4;
const NonExpandableBufferExceptionCode = 5;
const UninitializedParamsExceptionCode = 6;
const ParamMismatchExceptionCode = 7;
const NoMoreRowsExceptionCode = 8;
const StringToDecimalExceptionCode = 9;
const ConnectExceptionCode = 10;
const NoConnectionsExceptionCode = 11;
const LibEventExceptionCode = 12;

/* Client wrapper class */

class Client {

    private $native;
    private $listener;
    private $callbackIndex = 0;
    private $callbacks = array();

    private function __construct($native, $listener = null) {
        $this->native = $native;
        $this->listener = $listener;
    }

    public function createConnection($hostname, $port = 21212) {
        $this->native->createConnection($hostname, $port);
    }

    public function invoke($procedure, $callback = null) {
        switch (func_num_args()) {
            case 1:
                return $this->native->invoke($procedure);
            case 2:
                $wrapper = new ProcedureCallbackWrapper($this, $callback, $this->callbackIndex);
                $this->callbacks[$this->callbackIndex] = $wrapper;
                $this->callbackIndex++;
                return $this->native->invoke($procedure, $wrapper);
        }

    }

    public function invoked($index) {
        unset($this->callbacks[$index]);
    }

    public function uncaughtException($exception, $callback, $response) {
        if (isset($this->listener)) {
            return $this->listener->uncaughtException($exception, $callback, $response);
        } else {
            return false;
        }
    }

    public function runOnce() {
        return $this->native->runOnce();
    }

    public function run() {
        return $this->native->run();
    }

    public function drain() {
        return $this->native->drain();
    }

    public static function create($config = null) {
        switch (func_num_args()) {
            case 0:
                return new Client(ClientNative::create());
            case 1:
                $wrapper = $config->getListenerWrapper();
                if ($wrapper == null) {
                    return new Client(ClientNative::create($config->getNativeConfig()));
                } else {
                    return new Client(ClientNative::create($config->getNativeConfig()), $wrapper);
                }
            default:
                print('Invalid argument count to Client::create()' . "\n");
                return null;
        }
    }

    public static function createFromPool($hostname, $username = '', $password = '', $listener = null, $port = 21212) {
        switch (func_num_args()) {
            case 1:
            case 3:
                return new Client(ConnectionPool::pool()->acquireClient($hostname, $username, $password, $port));
            case 4:
            case 5:
                if ($listener === null) {
                    $wrapper = null;
                } else {
                    $wrapper = new StatusListenerWrapper($listener);
                }
                return new Client(
                    ConnectionPool::pool()->acquireClient($hostname, $username, $password, $wrapper, $port),
                    $wrapper);
            default:
                print('Invalid argument count to Client::createFromPool()' . "\n");
                return null;
        }
    }

}

/* StatusListener wrapper classes */

abstract class StatusListener {

    public abstract function uncaughtException($exception, $callback, $response);
    public abstract function connectionLost($hostname, $connectionsLeft);
    public abstract function backpressure($hasBackpressure);

}

class StatusListenerWrapper extends StatusListenerNative {

    private $listener;

    public function __construct($listener) {
        parent::__construct();
        $this->listener = $listener;
    }

    public function uncaughtException($exception, $callback, $response) {
        $retval = $this->listener->uncaughtException($exception, $callback, $response);
        return $retval === null ? false : $retval;
    }

    public function connectionLost($hostname, $connectionsLeft) {
        $retval = $this->listener->connectionLost($hostname, $connectionsLeft);
        return $retval === null ? false : $retval;
    }

    public function backpressure($hasBackpressure) {
        $retval = $this->listener->backpressure($hasBackpressure);
        return $retval === null ? false : $retval;
    }

}

/* ProcedureCallback wrapper classes */

abstract class ProcedureCallback {

    public abstract function callback($response);

}

class ProcedureCallbackWrapper extends ProcedureCallbackNative {

    private $client;
    private $callback;
    private $index;

    public function __construct($client, $callback, $index) {
        parent::__construct();
        $this->client = $client;
        $this->callback = $callback;
        $this->index = $index;
    }

    public function callback($response) {
        $this->client->invoked($this->index);
        $iresponse = new InvocationResponse($response);
        try {
            $retval = $this->callback->callback($iresponse);
        } catch (Exception $e) {
            return $this->client->uncaughtException($e, $this->callback, $iresponse);
        }
        $iresponse = null;
        $response = null; // avoids memory leak
        return $retval === null ? false : $retval;
    }

}

class ClientConfig {
    private $clientConfigNative;
    private $listenerWrapper;

    public function __construct($username = '', $password = '', $listener = null) {
        if ($listener == null) {
            $this->listenerWrapper = null;
            $this->clientConfigNative = new ClientConfigNative($username, $password);
        } else {
            $this->listenerWrapper = new StatusListenerWrapper($listener);
            $this->clientConfigNative = new ClientConfigNative($username, $password, $this->listenerWrapper);
        }
    }

    public function getNativeConfig() {
        return $this->clientConfigNative;
    }

    public function getListenerWrapper() {
        return $this->listenerWrapper;
    }
}


abstract class voltdb {
	const WIRE_TYPE_INVALID = -98;

	const WIRE_TYPE_ARRAY = -99;

	const WIRE_TYPE_NULL = 1;

	const WIRE_TYPE_TINYINT = 3;

	const WIRE_TYPE_SMALLINT = 4;

	const WIRE_TYPE_INTEGER = 5;

	const WIRE_TYPE_BIGINT = 6;

	const WIRE_TYPE_FLOAT = 8;

	const WIRE_TYPE_STRING = 9;

	const WIRE_TYPE_TIMESTAMP = 11;

	const WIRE_TYPE_DECIMAL = 22;

	const WIRE_TYPE_VARBINARY = 25;

	static function wireTypeToString($type) {
		return wireTypeToString($type);
	}

	const STATUS_CODE_SUCCESS = 1;

	const STATUS_CODE_USER_ABORT = -1;

	const STATUS_CODE_GRACEFUL_FAILURE = -2;

	const STATUS_CODE_UNEXPECTED_FAILURE = -3;

	const STATUS_CODE_CONNECTION_LOST = -4;

	static function cleanupOnScriptEnd($clients) {
		cleanupOnScriptEnd($clients);
	}

	static function onLoad() {
		onLoad();
	}

	static function onUnload() {
		onUnload();
	}

	static function onScriptEnd() {
		onScriptEnd();
	}
}

/* PHP Proxy Classes */
class Parameters {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_voltdb__Parameter_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Parameters(); break;
		default: $this->_cPtr=new_Parameters($n);
		}
	}

	public function size() {
		return Parameters_size($this->_cPtr);
	}

	public function capacity() {
		return Parameters_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Parameters_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Parameters_clear($this->_cPtr);
	}

	public function push($x) {
		Parameters_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Parameters_is_empty($this->_cPtr);
	}

	public function pop() {
		$r=Parameters_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Parameter($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function get($i) {
		$r=Parameters_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Parameter($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function set($i,$val) {
		Parameters_set($this->_cPtr,$i,$val);
	}
}

class Tables {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_voltdb__Table_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Tables(); break;
		default: $this->_cPtr=new_Tables($n);
		}
	}

	public function size() {
		return Tables_size($this->_cPtr);
	}

	public function capacity() {
		return Tables_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Tables_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Tables_clear($this->_cPtr);
	}

	public function push($x) {
		Tables_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Tables_is_empty($this->_cPtr);
	}

	public function pop() {
		$r=Tables_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Table($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function get($i) {
		$r=Tables_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Table($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function set($i,$val) {
		Tables_set($this->_cPtr,$i,$val);
	}
}

class Columns {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_voltdb__Column_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Columns(); break;
		default: $this->_cPtr=new_Columns($n);
		}
	}

	public function size() {
		return Columns_size($this->_cPtr);
	}

	public function capacity() {
		return Columns_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Columns_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Columns_clear($this->_cPtr);
	}

	public function push($x) {
		Columns_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Columns_is_empty($this->_cPtr);
	}

	public function pop() {
		$r=Columns_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Column($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function get($i) {
		$r=Columns_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Column($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function set($i,$val) {
		Columns_set($this->_cPtr,$i,$val);
	}
}

class Int8Vector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_int8_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Int8Vector(); break;
		default: $this->_cPtr=new_Int8Vector($n);
		}
	}

	public function size() {
		return Int8Vector_size($this->_cPtr);
	}

	public function capacity() {
		return Int8Vector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Int8Vector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Int8Vector_clear($this->_cPtr);
	}

	public function push($x) {
		Int8Vector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Int8Vector_is_empty($this->_cPtr);
	}

	public function pop() {
		return Int8Vector_pop($this->_cPtr);
	}

	public function get($i) {
		return Int8Vector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		Int8Vector_set($this->_cPtr,$i,$val);
	}
}

class Int16Vector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_int16_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Int16Vector(); break;
		default: $this->_cPtr=new_Int16Vector($n);
		}
	}

	public function size() {
		return Int16Vector_size($this->_cPtr);
	}

	public function capacity() {
		return Int16Vector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Int16Vector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Int16Vector_clear($this->_cPtr);
	}

	public function push($x) {
		Int16Vector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Int16Vector_is_empty($this->_cPtr);
	}

	public function pop() {
		return Int16Vector_pop($this->_cPtr);
	}

	public function get($i) {
		return Int16Vector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		Int16Vector_set($this->_cPtr,$i,$val);
	}
}

class Int32Vector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_int32_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Int32Vector(); break;
		default: $this->_cPtr=new_Int32Vector($n);
		}
	}

	public function size() {
		return Int32Vector_size($this->_cPtr);
	}

	public function capacity() {
		return Int32Vector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Int32Vector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Int32Vector_clear($this->_cPtr);
	}

	public function push($x) {
		Int32Vector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Int32Vector_is_empty($this->_cPtr);
	}

	public function pop() {
		return Int32Vector_pop($this->_cPtr);
	}

	public function get($i) {
		return Int32Vector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		Int32Vector_set($this->_cPtr,$i,$val);
	}
}

class Int64Vector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_int64_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Int64Vector(); break;
		default: $this->_cPtr=new_Int64Vector($n);
		}
	}

	public function size() {
		return Int64Vector_size($this->_cPtr);
	}

	public function capacity() {
		return Int64Vector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		Int64Vector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		Int64Vector_clear($this->_cPtr);
	}

	public function push($x) {
		Int64Vector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return Int64Vector_is_empty($this->_cPtr);
	}

	public function pop() {
		return Int64Vector_pop($this->_cPtr);
	}

	public function get($i) {
		return Int64Vector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		Int64Vector_set($this->_cPtr,$i,$val);
	}
}

class DoubleVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_double_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleVector(); break;
		default: $this->_cPtr=new_DoubleVector($n);
		}
	}

	public function size() {
		return DoubleVector_size($this->_cPtr);
	}

	public function capacity() {
		return DoubleVector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		DoubleVector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		DoubleVector_clear($this->_cPtr);
	}

	public function push($x) {
		DoubleVector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return DoubleVector_is_empty($this->_cPtr);
	}

	public function pop() {
		return DoubleVector_pop($this->_cPtr);
	}

	public function get($i) {
		return DoubleVector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		DoubleVector_set($this->_cPtr,$i,$val);
	}
}

class StringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__string_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVector(); break;
		default: $this->_cPtr=new_StringVector($n);
		}
	}

	public function size() {
		return StringVector_size($this->_cPtr);
	}

	public function capacity() {
		return StringVector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		StringVector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		StringVector_clear($this->_cPtr);
	}

	public function push($x) {
		StringVector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return StringVector_is_empty($this->_cPtr);
	}

	public function pop() {
		return StringVector_pop($this->_cPtr);
	}

	public function get($i) {
		return StringVector_get($this->_cPtr,$i);
	}

	public function set($i,$val) {
		StringVector_set($this->_cPtr,$i,$val);
	}
}

class DecimalVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_voltdb__Decimal_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DecimalVector(); break;
		default: $this->_cPtr=new_DecimalVector($n);
		}
	}

	public function size() {
		return DecimalVector_size($this->_cPtr);
	}

	public function capacity() {
		return DecimalVector_capacity($this->_cPtr);
	}

	public function reserve($n) {
		DecimalVector_reserve($this->_cPtr,$n);
	}

	public function clear() {
		DecimalVector_clear($this->_cPtr);
	}

	public function push($x) {
		DecimalVector_push($this->_cPtr,$x);
	}

	public function is_empty() {
		return DecimalVector_is_empty($this->_cPtr);
	}

	public function pop() {
		$r=DecimalVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Decimal($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function get($i) {
		$r=DecimalVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Decimal($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function set($i,$val) {
		DecimalVector_set($this->_cPtr,$i,$val);
	}
}

class c_Exception extends \Exception {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function what() {
		return c_Exception_what($this->_cPtr);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__Exception') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'c_Exception') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_c_Exception($_this);
	}
}

class NullPointerException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__NullPointerException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'NullPointerException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_NullPointerException($_this);
	}

	public function what() {
		return NullPointerException_what($this->_cPtr);
	}
}

class InvalidColumnException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__InvalidColumnException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'InvalidColumnException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_InvalidColumnException($_this);
	}

	public function what() {
		return InvalidColumnException_what($this->_cPtr);
	}
}

class OverflowUnderflowException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__OverflowUnderflowException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'OverflowUnderflowException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_OverflowUnderflowException($_this);
	}

	public function what() {
		return OverflowUnderflowException_what($this->_cPtr);
	}
}

class IndexOutOfBoundsException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__IndexOutOfBoundsException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'IndexOutOfBoundsException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_IndexOutOfBoundsException($_this);
	}

	public function what() {
		return IndexOutOfBoundsException_what($this->_cPtr);
	}
}

class NonExpandableBufferException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__NonExpandableBufferException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'NonExpandableBufferException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_NonExpandableBufferException($_this);
	}

	public function what() {
		return NonExpandableBufferException_what($this->_cPtr);
	}
}

class UninitializedParamsException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__UninitializedParamsException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'UninitializedParamsException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_UninitializedParamsException($_this);
	}

	public function what() {
		return UninitializedParamsException_what($this->_cPtr);
	}
}

class ParamMismatchException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__ParamMismatchException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'ParamMismatchException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_ParamMismatchException($_this);
	}

	public function what() {
		return ParamMismatchException_what($this->_cPtr);
	}
}

class NoMoreRowsException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__NoMoreRowsException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'NoMoreRowsException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_NoMoreRowsException($_this);
	}

	public function what() {
		return NoMoreRowsException_what($this->_cPtr);
	}
}

class StringToDecimalException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__StringToDecimalException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'StringToDecimalException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_StringToDecimalException($_this);
	}

	public function what() {
		return StringToDecimalException_what($this->_cPtr);
	}
}

class ConnectException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__ConnectException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'ConnectException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_ConnectException($_this);
	}

	public function what() {
		return ConnectException_what($this->_cPtr);
	}
}

class NoConnectionsException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__NoConnectionsException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'NoConnectionsException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_NoConnectionsException($_this);
	}

	public function what() {
		return NoConnectionsException_what($this->_cPtr);
	}
}

class LibEventException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__LibEventException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'LibEventException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_LibEventException($_this);
	}

	public function what() {
		return LibEventException_what($this->_cPtr);
	}
}

class ClusterInstanceMismatchException extends c_Exception {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		c_Exception::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Exception::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return c_Exception::__get($var);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__ClusterInstanceMismatchException') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'ClusterInstanceMismatchException') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_ClusterInstanceMismatchException($_this);
	}

	public function what() {
		return ClusterInstanceMismatchException_what($this->_cPtr);
	}
}

class Parameter {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'm_type') return Parameter_m_type_set($this->_cPtr,$value);
		if ($var === 'm_array') return Parameter_m_array_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Parameter_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Parameter_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($type_or_other=null,$array=null) {
		if (is_resource($type_or_other) && get_resource_type($type_or_other) === '_p_voltdb__Parameter') {
			$this->_cPtr=$type_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Parameter(); break;
		case 1: $this->_cPtr=new_Parameter($type_or_other); break;
		default: $this->_cPtr=new_Parameter($type_or_other,$array);
		}
	}
}

class ByteBuffer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function flip() {
		$r=ByteBuffer_flip($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ByteBuffer($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function clear() {
		$r=ByteBuffer_clear($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ByteBuffer($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function get($storage_or_index,$length_or_storage,$length=null) {
		switch (func_num_args()) {
		case 2: ByteBuffer_get($this->_cPtr,$storage_or_index,$length_or_storage); break;
		default: ByteBuffer_get($this->_cPtr,$storage_or_index,$length_or_storage,$length);
		}
	}

	public function put($storage_or_index_or_other,$length_or_storage=null,$length=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_put($this->_cPtr,$storage_or_index_or_other); break;
		case 2: $this->_cPtr=ByteBuffer_put($this->_cPtr,$storage_or_index_or_other,$length_or_storage); break;
		default: $this->_cPtr=ByteBuffer_put($this->_cPtr,$storage_or_index_or_other,$length_or_storage,$length);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getInt8($index=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_getInt8($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_getInt8($this->_cPtr,$index);
		}
		return $r;
	}

	public function putInt8($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putInt8($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putInt8($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getInt16($index=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_getInt16($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_getInt16($this->_cPtr,$index);
		}
		return $r;
	}

	public function putInt16($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putInt16($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putInt16($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getInt32($index=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_getInt32($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_getInt32($this->_cPtr,$index);
		}
		return $r;
	}

	public function putInt32($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putInt32($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putInt32($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getInt64($index=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_getInt64($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_getInt64($this->_cPtr,$index);
		}
		return $r;
	}

	public function putInt64($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putInt64($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putInt64($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getDouble($index=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_getDouble($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_getDouble($this->_cPtr,$index);
		}
		return $r;
	}

	public function putDouble($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putDouble($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putDouble($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function getString($wasNull_or_index,$wasNull=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_getString($this->_cPtr,$wasNull_or_index); break;
		default: $this->_cPtr=ByteBuffer_getString($this->_cPtr,$wasNull_or_index,$wasNull);
		}
		return $r;
	}

	public function getBytes($wasNull_or_index,$bufsize_or_wasNull,$out_value_or_bufsize,$out_len_or_out_value,$out_len=null) {
		switch (func_num_args()) {
		case 4: $this->_cPtr=ByteBuffer_getBytes($this->_cPtr,$wasNull_or_index,$bufsize_or_wasNull,$out_value_or_bufsize,$out_len_or_out_value); break;
		default: $this->_cPtr=ByteBuffer_getBytes($this->_cPtr,$wasNull_or_index,$bufsize_or_wasNull,$out_value_or_bufsize,$out_len_or_out_value,$out_len);
		}
		return $r;
	}

	public function putBytes($bufsize_or_index,$in_value_or_bufsize,$in_value=null) {
		switch (func_num_args()) {
		case 2: $this->_cPtr=ByteBuffer_putBytes($this->_cPtr,$bufsize_or_index,$in_value_or_bufsize); break;
		default: $this->_cPtr=ByteBuffer_putBytes($this->_cPtr,$bufsize_or_index,$in_value_or_bufsize,$in_value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function putString($value_or_index,$value=null) {
		switch (func_num_args()) {
		case 1: $this->_cPtr=ByteBuffer_putString($this->_cPtr,$value_or_index); break;
		default: $this->_cPtr=ByteBuffer_putString($this->_cPtr,$value_or_index,$value);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return new ByteBuffer($r);
		}
	}

	public function position($position=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_position($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_position($this->_cPtr,$position);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return $r;
		}
	}

	public function remaining() {
		return ByteBuffer_remaining($this->_cPtr);
	}

	public function hasRemaining() {
		return ByteBuffer_hasRemaining($this->_cPtr);
	}

	public function limit($newLimit=null) {
		switch (func_num_args()) {
		case 0: $this->_cPtr=ByteBuffer_limit($this->_cPtr); break;
		default: $this->_cPtr=ByteBuffer_limit($this->_cPtr,$newLimit);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ByteBuffer': return new ByteBuffer($r);
		default: return $r;
		}
	}

	public function bytes() {
		return ByteBuffer_bytes($this->_cPtr);
	}

	public function slice() {
		$r=ByteBuffer_slice($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ByteBuffer($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function isExpandable() {
		return ByteBuffer_isExpandable($this->_cPtr);
	}

	public function ensureRemaining($remaining) {
		ByteBuffer_ensureRemaining($this->_cPtr,$remaining);
	}

	public function ensureRemainingExact($remaining) {
		ByteBuffer_ensureRemainingExact($this->_cPtr,$remaining);
	}

	public function ensureCapacity($capacity) {
		ByteBuffer_ensureCapacity($this->_cPtr,$capacity);
	}

	public function ensureCapacityExact($capacity) {
		ByteBuffer_ensureCapacityExact($this->_cPtr,$capacity);
	}

	public function capacity() {
		return ByteBuffer_capacity($this->_cPtr);
	}

	protected function __construct($buffer_or_other=null,$capacity=null) {
		if (is_resource($buffer_or_other) && get_resource_type($buffer_or_other) === '_p_voltdb__ByteBuffer') {
			$this->_cPtr=$buffer_or_other;
			return;
		}
		if (get_class($this) === 'ByteBuffer') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ByteBuffer($_this); break;
		case 1: $this->_cPtr=new_ByteBuffer($_this, $buffer_or_other); break;
		default: $this->_cPtr=new_ByteBuffer($_this, $buffer_or_other,$capacity);
		}
	}
}

abstract class ExpandableByteBuffer extends ByteBuffer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		ByteBuffer::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ByteBuffer::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return ByteBuffer::__get($var);
	}

	public function ensureRemaining($amount) {
		ExpandableByteBuffer_ensureRemaining($this->_cPtr,$amount);
	}

	public function ensureRemainingExact($amount) {
		ExpandableByteBuffer_ensureRemainingExact($this->_cPtr,$amount);
	}

	public function ensureCapacity($capacity) {
		ExpandableByteBuffer_ensureCapacity($this->_cPtr,$capacity);
	}

	public function ensureCapacityExact($capacity) {
		ExpandableByteBuffer_ensureCapacityExact($this->_cPtr,$capacity);
	}

	public function isExpandable() {
		return ExpandableByteBuffer_isExpandable($this->_cPtr);
	}

	protected function __construct($other_or_data=null,$length=null) {
		if (is_resource($other_or_data) && get_resource_type($other_or_data) === '_p_voltdb__ExpandableByteBuffer') {
			$this->_cPtr=$other_or_data;
			return;
		}
		if (get_class($this) === 'ExpandableByteBuffer') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ExpandableByteBuffer($_this); break;
		case 1: $this->_cPtr=new_ExpandableByteBuffer($_this, $other_or_data); break;
		default: $this->_cPtr=new_ExpandableByteBuffer($_this, $other_or_data,$length);
		}
	}

	protected function resetRef($data) {
		ExpandableByteBuffer_resetRef($this->_cPtr,$data);
	}
}

class SharedByteBuffer extends ExpandableByteBuffer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		ExpandableByteBuffer::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ExpandableByteBuffer::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return ExpandableByteBuffer::__get($var);
	}

	public function slice() {
		$r=SharedByteBuffer_slice($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	public function __construct($other_or_data=null,$length=null) {
		if (is_resource($other_or_data) && get_resource_type($other_or_data) === '_p_voltdb__SharedByteBuffer') {
			$this->_cPtr=$other_or_data;
			return;
		}
		if (get_class($this) === 'SharedByteBuffer') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_SharedByteBuffer($_this); break;
		case 1: $this->_cPtr=new_SharedByteBuffer($_this, $other_or_data); break;
		default: $this->_cPtr=new_SharedByteBuffer($_this, $other_or_data,$length);
		}
	}

	protected function resetRef($data) {
		SharedByteBuffer_resetRef($this->_cPtr,$data);
	}
}

class ScopedByteBuffer extends ExpandableByteBuffer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		ExpandableByteBuffer::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ExpandableByteBuffer::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return ExpandableByteBuffer::__get($var);
	}

	public function __construct($capacity_or_data,$length=null) {
		if (is_resource($capacity_or_data) && get_resource_type($capacity_or_data) === '_p_voltdb__ScopedByteBuffer') {
			$this->_cPtr=$capacity_or_data;
			return;
		}
		if (get_class($this) === 'ScopedByteBuffer') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_ScopedByteBuffer($_this, $capacity_or_data); break;
		default: $this->_cPtr=new_ScopedByteBuffer($_this, $capacity_or_data,$length);
		}
	}

	protected function resetRef($data) {
		ScopedByteBuffer_resetRef($this->_cPtr,$data);
	}
}

class Decimal {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($txt_or_data=null) {
		if (is_resource($txt_or_data) && get_resource_type($txt_or_data) === '_p_voltdb__Decimal') {
			$this->_cPtr=$txt_or_data;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Decimal(); break;
		default: $this->_cPtr=new_Decimal($txt_or_data);
		}
	}

	public function getDecimal() {
		return Decimal_getDecimal($this->_cPtr);
	}

	public function toString() {
		return Decimal_toString($this->_cPtr);
	}

	public function isNull() {
		return Decimal_isNull($this->_cPtr);
	}
}

class ParameterSet {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	public function addBytes($bufsize,$in_value) {
		$r=ParameterSet_addBytes($this->_cPtr,$bufsize,$in_value);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ParameterSet($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function addDecimal($val_or_vals) {
		$r=ParameterSet_addDecimal($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addTimestamp($val_or_vals) {
		$r=ParameterSet_addTimestamp($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addInt64($val_or_vals) {
		$r=ParameterSet_addInt64($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addInt32($val_or_vals) {
		$r=ParameterSet_addInt32($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addInt16($val_or_vals) {
		$r=ParameterSet_addInt16($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addInt8($val_or_vals) {
		$r=ParameterSet_addInt8($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addDouble($val_or_vals) {
		$r=ParameterSet_addDouble($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function addNull() {
		$r=ParameterSet_addNull($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ParameterSet($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function addString($val_or_vals) {
		$r=ParameterSet_addString($this->_cPtr,$val_or_vals);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_voltdb__ParameterSet': return new ParameterSet($r);
		default: return new ParameterSet($r);
		}
	}

	public function reset() {
		ParameterSet_reset($this->_cPtr);
	}

	public function getSerializedSize() {
		return ParameterSet_getSerializedSize($this->_cPtr);
	}
}

class Procedure {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($name,$parameters) {
		if (is_resource($name) && get_resource_type($name) === '_p_voltdb__Procedure') {
			$this->_cPtr=$name;
			return;
		}
		$this->_cPtr=new_Procedure($name,$parameters);
	}

	public function params() {
		$r=Procedure_params($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ParameterSet($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function getSerializedSize() {
		return Procedure_getSerializedSize($this->_cPtr);
	}
}

class InvocationResponse {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	public function clientData() {
		return InvocationResponse_clientData($this->_cPtr);
	}

	public function statusCode() {
		return InvocationResponse_statusCode($this->_cPtr);
	}

	public function success() {
		return InvocationResponse_success($this->_cPtr);
	}

	public function failure() {
		return InvocationResponse_failure($this->_cPtr);
	}

	public function statusString() {
		return InvocationResponse_statusString($this->_cPtr);
	}

	public function appStatusCode() {
		return InvocationResponse_appStatusCode($this->_cPtr);
	}

	public function appStatusString() {
		return InvocationResponse_appStatusString($this->_cPtr);
	}

	public function clusterRoundTripTime() {
		return InvocationResponse_clusterRoundTripTime($this->_cPtr);
	}

	public function results() {
		$r=InvocationResponse_results($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Tables($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function toString() {
		return InvocationResponse_toString($this->_cPtr);
	}
}

abstract class ProcedureCallbackNative {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function callback($response) {
		return ProcedureCallbackNative_callback($this->_cPtr,$response);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__ProcedureCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'ProcedureCallbackNative') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_ProcedureCallbackNative($_this);
	}
}

class ClientNative {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	public function createConnection($hostname,$port=21212) {
		ClientNative_createConnection($this->_cPtr,$hostname,$port);
	}

	public function invoke($proc,$callback=null) {
		switch (func_num_args()) {
		case 1: return new InvocationResponse(ClientNative_invoke($this->_cPtr,$proc));
		default: ClientNative_invoke($this->_cPtr,$proc,$callback);
		}
	}

	public function runOnce() {
		ClientNative_runOnce($this->_cPtr);
	}

	public function run() {
		ClientNative_run($this->_cPtr);
	}

	public function drain() {
		return ClientNative_drain($this->_cPtr);
	}

	public function interrupt() {
		ClientNative_interrupt($this->_cPtr);
	}

	static function create($config=null) {
		switch (func_num_args()) {
		case 0: $r=ClientNative_create(); break;
		default: $r=ClientNative_create($config);
		}
		if (is_resource($r)) {
			return new ClientNative($r);
		}
		return $r;
	}
}

class Row {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	public function getVarbinary($column_or_cname,$bufsize,$out_value,$out_len) {
		return Row_getVarbinary($this->_cPtr,$column_or_cname,$bufsize,$out_value,$out_len);
	}

	public function getDecimal($column_or_cname) {
		$r=Row_getDecimal($this->_cPtr,$column_or_cname);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Decimal($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function getTimestamp($column_or_cname) {
		return Row_getTimestamp($this->_cPtr,$column_or_cname);
	}

	public function getInt64($column_or_cname) {
		return Row_getInt64($this->_cPtr,$column_or_cname);
	}

	public function getInt32($column_or_cname) {
		return Row_getInt32($this->_cPtr,$column_or_cname);
	}

	public function getInt16($column_or_cname) {
		return Row_getInt16($this->_cPtr,$column_or_cname);
	}

	public function getInt8($column_or_cname) {
		return Row_getInt8($this->_cPtr,$column_or_cname);
	}

	public function getDouble($column_or_cname) {
		return Row_getDouble($this->_cPtr,$column_or_cname);
	}

	public function getString($column_or_cname) {
		return Row_getString($this->_cPtr,$column_or_cname);
	}

	public function isNull($column_or_cname) {
		return Row_isNull($this->_cPtr,$column_or_cname);
	}

	public function wasNull() {
		return Row_wasNull($this->_cPtr);
	}

	public function toString($ostream=null,$indent=null) {
		switch (func_num_args()) {
		case 0: Row_toString($this->_cPtr); break;
		case 1: Row_toString($this->_cPtr,$ostream); break;
		default: Row_toString($this->_cPtr,$ostream,$indent);
		}
	}

	public function columnCount() {
		return Row_columnCount($this->_cPtr);
	}

	public function columns() {
		$r=Row_columns($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Columns($r);
			}
			return new $c($r);
		}
		return $r;
	}
}

class TableIterator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	public function hasNext() {
		return TableIterator_hasNext($this->_cPtr);
	}

	public function next() {
		$r=TableIterator_next($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Row($r);
			}
			return new $c($r);
		}
		return $r;
	}
}

class Table {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($buffer=null) {
		if (is_resource($buffer) && get_resource_type($buffer) === '_p_voltdb__Table') {
			$this->_cPtr=$buffer;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Table(); break;
		default: $this->_cPtr=new_Table($buffer);
		}
	}

	public function iterator() {
		$r=Table_iterator($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new TableIterator($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function getStatusCode() {
		return Table_getStatusCode($this->_cPtr);
	}

	public function rowCount() {
		return Table_rowCount($this->_cPtr);
	}

	public function columns() {
		$r=Table_columns($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new Columns($r);
			}
			return new $c($r);
		}
		return $r;
	}

	public function columnCount() {
		return Table_columnCount($this->_cPtr);
	}

	public function toString($ostream=null,$indent=null) {
		switch (func_num_args()) {
		case 0: Table_toString($this->_cPtr); break;
		case 1: Table_toString($this->_cPtr,$ostream); break;
		default: Table_toString($this->_cPtr,$ostream,$indent);
		}
	}
}

abstract class StatusListenerNative {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function uncaughtException($exception,$callback,$response) {
		return StatusListenerNative_uncaughtException($this->_cPtr,$exception,$callback,$response);
	}

	public function connectionLost($hostname,$connectionsLeft) {
		return StatusListenerNative_connectionLost($this->_cPtr,$hostname,$connectionsLeft);
	}

	public function backpressure($hasBackpressure) {
		return StatusListenerNative_backpressure($this->_cPtr,$hasBackpressure);
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__StatusListener') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'StatusListenerNative') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_StatusListenerNative($_this);
	}
}

class Column {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'm_name') return Column_m_name_set($this->_cPtr,$value);
		if ($var === 'm_type') return Column_m_type_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Column_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Column_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($name_or_type=null,$type=null) {
		if (is_resource($name_or_type) && get_resource_type($name_or_type) === '_p_voltdb__Column') {
			$this->_cPtr=$name_or_type;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Column(); break;
		case 1: $this->_cPtr=new_Column($name_or_type); break;
		default: $this->_cPtr=new_Column($name_or_type,$type);
		}
	}

	public function name() {
		return Column_name($this->_cPtr);
	}

	public function type() {
		return Column_type($this->_cPtr);
	}
}

class ConnectionPool {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_voltdb__ConnectionPool') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'ConnectionPool') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_ConnectionPool($_this);
	}

	public function acquireClient($hostname,$username,$password,$port_or_listener=null,$port=null) {
		switch (func_num_args()) {
		case 3: $r=ConnectionPool_acquireClient($this->_cPtr,$hostname,$username,$password); break;
		case 4: $r=ConnectionPool_acquireClient($this->_cPtr,$hostname,$username,$password,$port_or_listener); break;
		default: $r=ConnectionPool_acquireClient($this->_cPtr,$hostname,$username,$password,$port_or_listener,$port);
		}
		if (is_resource($r)) {
			return new ClientNative($r);
		}
		return $r;
	}

	public function onScriptEnd() {
		ConnectionPool_onScriptEnd($this->_cPtr);
	}

	static function pool() {
		$r=ConnectionPool_pool();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new ConnectionPool($r);
			}
			return new $c($r);
		}
		return $r;
	}
}

class ClientConfigNative {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'ClientConfigNative_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_voltdb_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('ClientConfigNative_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'ClientConfigNative_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_voltdb_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($username=null,$password=null,$listener=null) {
		if (is_resource($username) && get_resource_type($username) === '_p_voltdb__ClientConfig') {
			$this->_cPtr=$username;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ClientConfigNative(); break;
		case 1: $this->_cPtr=new_ClientConfigNative($username); break;
		case 2: $this->_cPtr=new_ClientConfigNative($username,$password); break;
		default: $this->_cPtr=new_ClientConfigNative($username,$password,$listener);
		}
	}
}


?>
